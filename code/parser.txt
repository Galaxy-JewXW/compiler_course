INTTK int
IDENFR kkk
<VarDef>
COMMA ,
IDENFR bbb
LBRACK [
INTCON 3
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
<VarDef>
SEMICN ;
<VarDecl>
CONSTTK const
INTTK int
IDENFR ci
ASSIGN =
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
<ConstInitVal>
<ConstDef>
COMMA ,
IDENFR cj
LBRACK [
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
COMMA ,
INTCON 2
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<ConstExp>
RBRACE }
<ConstInitVal>
<ConstDef>
SEMICN ;
<ConstDecl>
VOIDTK void
<FuncType>
IDENFR foo
LPARENT (
INTTK int
IDENFR a
LBRACK [
RBRACK ]
<FuncFParam>
COMMA ,
INTTK int
IDENFR b
<FuncFParam>
COMMA ,
CHARTK char
IDENFR c
<FuncFParam>
COMMA ,
CHARTK char
IDENFR d
LBRACK [
RBRACK ]
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
CHARTK char
<FuncType>
IDENFR ab
LPARENT (
CHARTK char
IDENFR c
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
INTTK int
IDENFR k
<VarDef>
SEMICN ;
<VarDecl>
CHARTK char
IDENFR s
<VarDef>
SEMICN ;
<VarDecl>
RETURNTK return
INTCON 1
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
<FuncType>
IDENFR cd
LPARENT (
INTTK int
IDENFR s
<FuncFParam>
<FuncFParams>
RPARENT )
LBRACE {
INTTK int
IDENFR b
<VarDef>
SEMICN ;
<VarDecl>
RETURNTK return
CHRCON 'a'
<Character>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<FuncDef>
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR a
<VarDef>
SEMICN ;
<VarDecl>
LBRACE {
INTTK int
IDENFR a
<VarDef>
SEMICN ;
<VarDecl>
LBRACE {
INTTK int
IDENFR a
<VarDef>
SEMICN ;
<VarDecl>
RBRACE }
<Block>
<Stmt>
RBRACE }
<Block>
<Stmt>
LBRACE {
INTTK int
IDENFR a
<VarDef>
SEMICN ;
<VarDecl>
RBRACE }
<Block>
<Stmt>
RETURNTK return
INTCON 0
<Number>
<PrimaryExp>
<UnaryExp>
<MulExp>
<AddExp>
<Exp>
SEMICN ;
<Stmt>
RBRACE }
<Block>
<MainFuncDef>
<CompUnit>
