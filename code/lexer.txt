INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR cccddd
LBRACK [
INTCON 4
RBRACK ]
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "22373300\n"
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d"
COMMA ,
INTCON 1
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 2
OR ||
INTCON 1
NEQ !=
INTCON 2
AND &&
INTCON 1
EQL ==
INTCON 3
OR ||
INTCON 4
GRE >
INTCON 6
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 1
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 2
COMMA ,
IDENFR c
ASSIGN =
INTCON 3
SEMICN ;
CHARTK char
IDENFR ca
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR cb
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR cc
ASSIGN =
CHRCON 'c'
SEMICN ;
LBRACE {
RBRACE }
LBRACE {
RBRACE }
LBRACE {
RBRACE }
SEMICN ;
INTCON 1
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR a
GRE >
INTCON 1
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR b
LSS <
INTCON 3
RPARENT )
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR b
ASSIGN =
IDENFR b
PLUS +
INTCON 1
MINU -
INTCON 1
MULT *
INTCON 1
MINU -
INTCON 0
MULT *
INTCON 8
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR a
ASSIGN =
INTCON 0
SEMICN ;
IDENFR a
LEQ <=
INTCON 10
SEMICN ;
IDENFR a
ASSIGN =
IDENFR a
PLUS +
INTCON 1
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR c
LEQ <=
INTCON 3
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR b
ASSIGN =
INTCON 1
SEMICN ;
IDENFR b
GRE >
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
SEMICN ;
IDENFR c
ASSIGN =
IDENFR c
PLUS +
INTCON 1
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
IDENFR c
ASSIGN =
INTCON 1
SEMICN ;
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR c
GRE >
INTCON 1
SEMICN ;
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
INTTK int
IDENFR aaa
SEMICN ;
CHARTK char
IDENFR cccaaa
SEMICN ;
IDENFR aaa
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
IDENFR cccaaa
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
LBRACE {
INTTK int
IDENFR a
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
INTTK int
IDENFR b
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
INTCON 0
COMMA ,
IDENFR d
ASSIGN =
INTCON 1
SEMICN ;
IDENFR voidfoo1
LPARENT (
RPARENT )
SEMICN ;
IDENFR voidfoo2
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
IDENFR voidf003
LPARENT (
IDENFR c
COMMA ,
IDENFR a
COMMA ,
IDENFR b
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
CHARTK char
IDENFR ca
ASSIGN =
CHRCON 'i'
SEMICN ;
CHARTK char
IDENFR cb
LBRACK [
INTCON 6
RBRACK ]
ASSIGN =
STRCON "Hello"
SEMICN ;
IDENFR intfoo1
LPARENT (
RPARENT )
SEMICN ;
IDENFR intfoo2
LPARENT (
IDENFR ca
RPARENT )
SEMICN ;
IDENFR intfoo3
LPARENT (
IDENFR c
COMMA ,
IDENFR cb
COMMA ,
IDENFR b
COMMA ,
IDENFR ca
RPARENT )
SEMICN ;
RBRACE }
LBRACE {
INTTK int
IDENFR a
ASSIGN =
INTCON 4
MOD %
INTCON 2
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 1
PLUS +
INTCON 1
DIV /
INTCON 2
SEMICN ;
INTTK int
IDENFR c
ASSIGN =
INTCON 1
MINU -
INTCON 1
MULT *
INTCON 0
SEMICN ;
IDENFR a
SEMICN ;
PLUS +
IDENFR a
SEMICN ;
MINU -
IDENFR a
SEMICN ;
CHRCON 'a'
SEMICN ;
INTCON 2
SEMICN ;
IDENFR vararrca
LBRACK [
INTCON 1
RBRACK ]
SEMICN ;
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
LPARENT (
IDENFR a
PLUS +
IDENFR b
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
NEQ !=
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
PLUS +
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
LSS <
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
GRE >
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
LEQ <=
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
GEQ >=
INTCON 2
RPARENT )
SEMICN ;
IFTK if
LPARENT (
NOT !
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
