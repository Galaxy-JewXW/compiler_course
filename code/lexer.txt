INTTK int
IDENFR a
ASSIGN =
INTCON 9
SEMICN ;
CONSTTK const
INTTK int
IDENFR i1
ASSIGN =
INTCON 9
SEMICN ;
CONSTTK const
INTTK int
IDENFR i2
ASSIGN =
INTCON 10
COMMA ,
IDENFR i3
ASSIGN =
INTCON 11
SEMICN ;
INTTK int
IDENFR b
ASSIGN =
INTCON 7
COMMA ,
IDENFR c
COMMA ,
IDENFR d
ASSIGN =
INTCON 12
SEMICN ;
CHARTK char
IDENFR ch1
ASSIGN =
CHRCON 'a'
SEMICN ;
CHARTK char
IDENFR ch2
ASSIGN =
CHRCON 'b'
COMMA ,
IDENFR ch3
COMMA ,
IDENFR ch4
ASSIGN =
CHRCON 'k'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ch5
ASSIGN =
CHRCON 'b'
SEMICN ;
CONSTTK const
CHARTK char
IDENFR ch6
ASSIGN =
CHRCON 'c'
COMMA ,
IDENFR ch7
ASSIGN =
CHRCON '9'
SEMICN ;
INTTK int
IDENFR arr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
INTTK int
IDENFR arr2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
COMMA ,
IDENFR arr3
LBRACK [
INTCON 3
RBRACK ]
COMMA ,
IDENFR arr4
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR carr1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACE }
SEMICN ;
CONSTTK const
INTTK int
IDENFR carr2
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
LBRACE {
INTCON 0
RBRACE }
COMMA ,
IDENFR carr4
LBRACK [
INTCON 2
RBRACK ]
ASSIGN =
LBRACE {
INTCON 1
COMMA ,
INTCON 2
RBRACE }
SEMICN ;
CHARTK char
IDENFR s1
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "cj"
SEMICN ;
CHARTK char
IDENFR s2
LBRACK [
INTCON 5
RBRACK ]
ASSIGN =
STRCON "Jewl"
COMMA ,
IDENFR s21
LBRACK [
INTCON 100
RBRACK ]
ASSIGN =
STRCON "Mamba out"
COMMA ,
IDENFR s31
LBRACK [
INTCON 10
RBRACK ]
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s11
LBRACK [
INTCON 3
RBRACK ]
ASSIGN =
STRCON "lb"
SEMICN ;
CONSTTK const
CHARTK char
IDENFR s211
LBRACK [
INTCON 4
RBRACK ]
ASSIGN =
STRCON "bil"
COMMA ,
IDENFR sss
LBRACK [
INTCON 19
RBRACK ]
ASSIGN =
STRCON "Kobe"
SEMICN ;
VOIDTK void
IDENFR foo1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR foo2
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
LBRACE {
RBRACE }
LBRACE {
RBRACE }
LBRACE {
RBRACE }
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR foo3
LPARENT (
INTTK int
IDENFR x
COMMA ,
CHARTK char
IDENFR y
RPARENT )
LBRACE {
INTTK int
IDENFR z
ASSIGN =
INTCON 9
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
VOIDTK void
IDENFR foo4
LPARENT (
INTTK int
IDENFR x
COMMA ,
INTTK int
IDENFR xx
LBRACK [
RBRACK ]
COMMA ,
CHARTK char
IDENFR y
COMMA ,
CHARTK char
IDENFR yy
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
IDENFR bar1
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR bar2
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
LPARENT (
IDENFR x
PLUS +
INTCON 2
RPARENT )
MINU -
INTCON 3
SEMICN ;
RBRACE }
INTTK int
IDENFR bar4
LPARENT (
INTTK int
IDENFR y
COMMA ,
CHARTK char
IDENFR xxx
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR xsa
LBRACK [
RBRACK ]
COMMA ,
CHARTK char
IDENFR ai
RPARENT )
LBRACE {
RETURNTK return
INTCON 1
SEMICN ;
RBRACE }
CHARTK char
IDENFR apple
LPARENT (
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'a'
SEMICN ;
RBRACE }
CHARTK char
IDENFR apple1
LPARENT (
INTTK int
IDENFR x
RPARENT )
LBRACE {
RETURNTK return
CHRCON 'b'
SEMICN ;
RBRACE }
CHARTK char
IDENFR apple16
LPARENT (
CHARTK char
IDENFR k
RPARENT )
LBRACE {
RETURNTK return
CHRCON '0'
SEMICN ;
RBRACE }
CHARTK char
IDENFR apple2
LPARENT (
INTTK int
IDENFR c
COMMA ,
CHARTK char
IDENFR s
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR s
LBRACK [
IDENFR c
RBRACK ]
SEMICN ;
RBRACE }
CHARTK char
IDENFR apple3
LPARENT (
INTTK int
IDENFR arr
LBRACK [
RBRACK ]
COMMA ,
INTTK int
IDENFR c
COMMA ,
CHARTK char
IDENFR s
LBRACK [
RBRACK ]
RPARENT )
LBRACE {
RETURNTK return
IDENFR s
LBRACK [
IDENFR arr
LBRACK [
IDENFR c
RBRACK ]
RBRACK ]
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR apple1
LPARENT (
INTCON 3
RPARENT )
SEMICN ;
IDENFR foo1
LPARENT (
RPARENT )
SEMICN ;
IDENFR bar4
LPARENT (
IDENFR d
COMMA ,
IDENFR s2
COMMA ,
IDENFR arr1
COMMA ,
CHRCON 'b'
RPARENT )
SEMICN ;
INTTK int
IDENFR k
ASSIGN =
INTCON 3
MULT *
INTCON 4
PLUS +
INTCON 2
DIV /
INTCON 1
PLUS +
LPARENT (
INTCON 8
MOD %
INTCON 5
RPARENT )
MINU -
INTCON 3
MULT *
LPARENT (
INTCON 7
MINU -
INTCON 21
PLUS +
INTCON 1
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
IDENFR bar2
LPARENT (
INTCON 99
RPARENT )
SEMICN ;
IDENFR k
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
INTCON 22373498
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "hello %d compiler\n"
COMMA ,
IDENFR k
RPARENT )
SEMICN ;
IFTK if
LPARENT (
INTCON 1
EQL ==
INTCON 2
OR ||
INTCON 2
EQL ==
IDENFR k
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR k
EQL ==
INTCON 3
AND &&
IDENFR k
EQL ==
INTCON 4
MINU -
INTCON 1
OR ||
IDENFR k
EQL ==
INTCON 1
RPARENT )
SEMICN ;
INTTK int
IDENFR aaaaa
ASSIGN =
INTCON 4
COMMA ,
IDENFR bbbbb
ASSIGN =
INTCON 5
SEMICN ;
IFTK if
LPARENT (
IDENFR aaaaa
EQL ==
IDENFR bbbbb
OR ||
IDENFR aaaaa
EQL ==
INTCON 4
AND &&
IDENFR bbbbb
EQL ==
IDENFR aaaaa
PLUS +
INTCON 1
OR ||
IDENFR k
MINU -
INTCON 2
EQL ==
INTCON 0
AND &&
IDENFR k
GEQ >=
INTCON 0
OR ||
IDENFR bbbbb
LSS <
MINU -
INTCON 4
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR k
EQL ==
INTCON 3
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%d\n"
COMMA ,
IDENFR k
PLUS +
INTCON 1
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR k
MINU -
INTCON 1
SEMICN ;
PLUS +
IDENFR k
SEMICN ;
MINU -
IDENFR k
SEMICN ;
INTCON 1
PLUS +
INTCON 2
SEMICN ;
INTCON 1
MINU -
INTCON 2
SEMICN ;
INTCON 2
MOD %
INTCON 4
SEMICN ;
INTCON 3
DIV /
INTCON 2
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR k
NEQ !=
INTCON 2
RPARENT )
LBRACE {
INTTK int
IDENFR i
SEMICN ;
FORTK for
LPARENT (
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
IDENFR i
LSS <
INTCON 100
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR i
LSS <
INTCON 10
RPARENT )
LBRACE {
CONTINUETK continue
SEMICN ;
RBRACE }
IDENFR k
ASSIGN =
IDENFR i
SEMICN ;
IFTK if
LPARENT (
IDENFR i
GRE >
INTCON 20
RPARENT )
LBRACE {
BREAKTK break
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
LBRACE {
RBRACE }
LBRACE {
RBRACE }
LBRACE {
RBRACE }
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "K now is %d\n"
COMMA ,
IDENFR k
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "What can I say, mamba out!\n"
RPARENT )
SEMICN ;
CHARTK char
IDENFR ch
ASSIGN =
CHRCON 'a'
SEMICN ;
IDENFR ch
ASSIGN =
IDENFR apple16
LPARENT (
IDENFR ch
RPARENT )
SEMICN ;
IDENFR ch
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR ch
GRE >
CHRCON 'A'
RPARENT )
LBRACE {
IDENFR ch
ASSIGN =
IDENFR ch
MINU -
CHRCON 'A'
PLUS +
CHRCON 'a'
SEMICN ;
RBRACE }
PRINTFTK printf
LPARENT (
STRCON "ch is %c\n"
COMMA ,
IDENFR ch
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
