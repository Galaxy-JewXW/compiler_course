declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [5 x i8] c"j : \00", align 1
@.s.1 = private unnamed_addr constant [7 x i8] c", k : \00", align 1
@.s.2 = private unnamed_addr constant [7 x i8] c", l : \00", align 1
@.s.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.4 = private unnamed_addr constant [6 x i8] c"a! = \00", align 1
@.s.5 = private unnamed_addr constant [9 x i8] c", num = \00", align 1
@.s.6 = private unnamed_addr constant [31 x i8] c"scanf a, b to get gcd and lcm\0A\00", align 1
@.s.7 = private unnamed_addr constant [8 x i8] c"gcd is \00", align 1
@.s.8 = private unnamed_addr constant [8 x i8] c"lcm is \00", align 1
@.s.9 = private unnamed_addr constant [26 x i8] c"scanf a to get Fibonacci\0A\00", align 1
@.s.10 = private unnamed_addr constant [8 x i8] c"fib is \00", align 1



define dso_local void @fun1() {
0:
	br label %1
1:
	%2 = phi i32 [ 0, %0 ], [ %7, %9 ]
	%3 = phi i32 [ 4, %0 ], [ %10, %9 ]
	%4 = phi i32 [ 11, %0 ], [ %11, %9 ]
	%5 = icmp sle i32 %2, 7
	br i1 %5, label %6, label %12
6:
	%7 = add i32 %2, 1
	%8 = icmp eq i32 %4, %7
	br i1 %8, label %13, label %15
9:
	%10 = phi i32 [ %14, %13 ], [ %3, %15 ]
	%11 = phi i32 [ %4, %13 ], [ %16, %15 ]
	br label %1
12:
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %4)
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.2, i64 0, i64 0))
	call void @putint(i32 4)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	ret void
13:
	%14 = add i32 %3, %4
	br label %9
15:
	%16 = sub i32 %4, 1
	br label %9
}

define dso_local i32 @fun2(i32 %0) {
1:
	br label %2
2:
	%3 = phi i32 [ 1, %1 ], [ %19, %24 ]
	%4 = phi i32 [ 1, %1 ], [ %8, %24 ]
	%5 = phi i32 [ %0, %1 ], [ %9, %24 ]
	%6 = icmp sge i32 %5, 1
	br i1 %6, label %7, label %11
7:
	%8 = mul i32 %4, %5
	%9 = sub i32 %5, 1
	%10 = icmp eq i32 %9, 1
	br i1 %10, label %13, label %14
11:
	%12 = phi i32 [ %4, %2 ], [ %8, %13 ]
	call void @putstr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.s.4, i64 0, i64 0))
	call void @putint(i32 %12)
	call void @putstr(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.s.5, i64 0, i64 0))
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	ret i32 1
13:
	br label %11
14:
	%15 = icmp ne i32 %9, 1
	br i1 %15, label %16, label %18
16:
	%17 = add i32 %3, 1
	br label %18
18:
	%19 = phi i32 [ %3, %14 ], [ %17, %16 ]
	br label %2
}

define dso_local i32 @fun3(i32 %0, i32 %1) {
2:
	%3 = icmp sgt i32 %0, %1
	br i1 %3, label %4, label %5
4:
	ret i32 %0
5:
	%6 = icmp slt i32 %0, %1
	br i1 %6, label %7, label %8
7:
	ret i32 %1
8:
	ret i32 %0
}

define dso_local i32 @gcd(i32 %0, i32 %1) {
2:
	%3 = srem i32 %0, %1
	%4 = icmp eq i32 %3, 0
	br i1 %4, label %5, label %6
5:
	ret i32 %1
6:
	%7 = srem i32 %0, %1
	%8 = call i32 @gcd(i32 %1, i32 %7)
	ret i32 %8
}

define dso_local i32 @lcm(i32 %0, i32 %1) {
2:
	%3 = call i32 @gcd(i32 %0, i32 %1)
	%4 = mul i32 %0, %1
	%5 = sdiv i32 %4, %3
	ret i32 %5
}

define dso_local void @fun4(i32 %0, i32 %1, i32 %2) {
3:
	%4 = add i32 %0, %1
	%5 = sub i32 %4, %2
	%6 = mul i32 %5, %0
	call void @putint(i32 %6)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	ret void
}

define dso_local i32 @fun5(i32 %0) {
1:
	%2 = icmp eq i32 %0, 1
	br i1 %2, label %3, label %4
3:
	ret i32 1
4:
	%5 = icmp eq i32 %0, 2
	br i1 %5, label %6, label %7
6:
	ret i32 1
7:
	%8 = sub i32 %0, 1
	%9 = call i32 @fun5(i32 %8)
	%10 = sub i32 %0, 2
	%11 = call i32 @fun5(i32 %10)
	%12 = add i32 %9, %11
	ret i32 %12
}

define dso_local i32 @main() {
0:
	br label %1
1:
	%2 = phi i32 [ 0, %0 ], [ %7, %9 ]
	%3 = phi i32 [ 4, %0 ], [ %10, %9 ]
	%4 = phi i32 [ 11, %0 ], [ %11, %9 ]
	%5 = icmp sle i32 %2, 7
	br i1 %5, label %6, label %12
6:
	%7 = add i32 %2, 1
	%8 = icmp eq i32 %4, %7
	br i1 %8, label %13, label %15
9:
	%10 = phi i32 [ %14, %13 ], [ %3, %15 ]
	%11 = phi i32 [ %4, %13 ], [ %16, %15 ]
	br label %1
12:
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %4)
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.2, i64 0, i64 0))
	call void @putint(i32 4)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	br label %17
13:
	%14 = add i32 %3, %4
	br label %9
15:
	%16 = sub i32 %4, 1
	br label %9
17:
	br label %18
18:
	%19 = phi i32 [ 1, %17 ], [ %35, %62 ]
	%20 = phi i32 [ 1, %17 ], [ %24, %62 ]
	%21 = phi i32 [ 6, %17 ], [ %25, %62 ]
	%22 = icmp sge i32 %21, 1
	br i1 %22, label %23, label %27
23:
	%24 = mul i32 %20, %21
	%25 = sub i32 %21, 1
	%26 = icmp eq i32 %25, 1
	br i1 %26, label %29, label %30
27:
	%28 = phi i32 [ %20, %18 ], [ %24, %29 ]
	call void @putstr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.s.4, i64 0, i64 0))
	call void @putint(i32 %28)
	call void @putstr(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.s.5, i64 0, i64 0))
	call void @putint(i32 %19)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	br label %36
29:
	br label %27
30:
	%31 = icmp ne i32 %25, 1
	br i1 %31, label %32, label %34
32:
	%33 = add i32 %19, 1
	br label %34
34:
	%35 = phi i32 [ %19, %30 ], [ %33, %32 ]
	br label %18
36:
	br label %37
37:
	br label %38
38:
	%39 = icmp sgt i32 2, 6
	br i1 %39, label %40, label %41
40:
	br label %45
41:
	%42 = icmp slt i32 2, 6
	br i1 %42, label %43, label %44
43:
	br label %45
44:
	br label %45
45:
	%46 = phi i32 [ 2, %40 ], [ 2, %44 ], [ 6, %43 ]
	call void @putint(i32 %46)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.s.6, i64 0, i64 0))
	%47 = call i32 @getint()
	%48 = call i32 @getint()
	%49 = call i32 @gcd(i32 %47, i32 %48)
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.7, i64 0, i64 0))
	call void @putint(i32 %49)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	%50 = call i32 @lcm(i32 %47, i32 %48)
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.8, i64 0, i64 0))
	call void @putint(i32 %50)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	%51 = call i32 @getint()
	%52 = add i32 %51, 3
	%53 = sub i32 %52, 10
	%54 = mul i32 %53, %51
	call void @putint(i32 %54)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	br label %55
55:
	call void @putstr(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.s.9, i64 0, i64 0))
	%56 = call i32 @getint()
	%57 = call i32 @fun5(i32 %56)
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.10, i64 0, i64 0))
	call void @putint(i32 %57)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	ret i32 0
}
