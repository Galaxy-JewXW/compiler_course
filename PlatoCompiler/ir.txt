declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [7 x i8] c"round \00", align 1
@.s.1 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.s.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1



define dso_local i32 @main() {
0:
	%1 = call i32 @getint()
	br label %2
2:
	%3 = phi i32 [ 1, %0 ], [ %20, %19 ], [ %3, %15 ]
	%4 = phi i32 [ 1, %0 ], [ %9, %19 ], [ %9, %15 ]
	%5 = phi i32 [ 1, %0 ], [ %4, %19 ], [ %4, %15 ]
	%6 = add i32 %1, 1
	%7 = icmp slt i32 %3, %6
	br i1 %7, label %8, label %14
8:
	%9 = add i32 %5, %4
	%10 = sdiv i32 %3, 2
	%11 = mul i32 %10, 2
	%12 = sub i32 %3, %11
	%13 = icmp eq i32 %12, 1
	br i1 %13, label %15, label %16
14:
	ret i32 0
15:
	br label %2
16:
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %4)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	%17 = icmp sgt i32 %3, 19
	br i1 %17, label %18, label %19
18:
	br label %14
19:
	%20 = add i32 %3, 1
	br label %2
}
