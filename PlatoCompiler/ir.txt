declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [13 x i8] c"print int : \00", align 1
@.s.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.2 = private unnamed_addr constant [10 x i8] c"19373479\0A\00", align 1



define dso_local void @funcDef_void() {
0:
	ret void
}

define dso_local i32 @funcDef_0(i32 %0) {
1:
	%2 = mul i32 %0, 10
	ret i32 %2
}

define dso_local i32 @funcDef_1(i32 %0, i32 %1) {
2:
	%3 = mul i32 %0, %1
	%4 = icmp ne i32 %1, 0
	br i1 %4, label %5, label %9
5:
	%6 = srem i32 %0, %1
	%7 = add i32 %3, %6
	%8 = sdiv i32 %0, %1
	br label %12
9:
	%10 = add i32 %3, %0
	%11 = sdiv i32 %0, 2
	br label %12
12:
	%13 = phi i32 [ %8, %5 ], [ %11, %9 ]
	%14 = phi i32 [ %7, %5 ], [ %10, %9 ]
	%15 = sub i32 %14, %3
	%16 = icmp slt i32 %3, 0
	br i1 %16, label %17, label %19
17:
	%18 = sub i32 0, %3
	br label %19
19:
	%20 = phi i32 [ %3, %12 ], [ %18, %17 ]
	%21 = add i32 1, %20
	%22 = add i32 %15, %13
	%23 = mul i32 %21, %22
	ret i32 %23
}

define dso_local void @printInt(i32 %0) {
1:
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %0)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	ret void
}

define dso_local i32 @main() {
0:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.s.2, i64 0, i64 0))
	%1 = call i32 @getint()
	%2 = call i32 @getint()
	%3 = call i32 @getint()
	%4 = call i32 @getint()
	%5 = icmp sgt i32 %1, 5
	br i1 %5, label %6, label %7
6:
	br label %7
7:
	%8 = phi i32 [ %1, %0 ], [ 5, %6 ]
	br label %9
9:
	%10 = phi i32 [ %4, %7 ], [ %43, %42 ]
	%11 = phi i32 [ %3, %7 ], [ %35, %42 ]
	%12 = phi i32 [ %2, %7 ], [ %27, %42 ]
	%13 = phi i32 [ 10, %7 ], [ %16, %42 ]
	%14 = icmp ne i32 %13, 0
	br i1 %14, label %15, label %18
15:
	%16 = sub i32 %13, 1
	%17 = icmp sge i32 %12, %16
	br i1 %17, label %22, label %26
18:
	%19 = icmp eq i32 0, %13
	%20 = zext i1 %19 to i32
	%21 = icmp ne i32 %20, 0
	br i1 %21, label %50, label %51
22:
	%23 = add i32 %16, 1
	%24 = sdiv i32 %12, %23
	%25 = add i32 %24, %16
	br label %26
26:
	%27 = phi i32 [ %12, %15 ], [ %25, %22 ]
	%28 = icmp sle i32 %11, %16
	br i1 %28, label %29, label %31
29:
	%30 = mul i32 %11, %16
	br label %34
31:
	%32 = add i32 %16, 3
	%33 = srem i32 %11, %32
	br label %34
34:
	%35 = phi i32 [ %30, %29 ], [ %33, %31 ]
	br label %36
36:
	%37 = phi i32 [ %10, %34 ], [ %48, %47 ], [ %40, %49 ]
	%38 = icmp slt i32 %37, %35
	br i1 %38, label %39, label %42
39:
	%40 = add i32 %37, %16
	%41 = icmp eq i32 %40, %8
	br i1 %41, label %44, label %45
42:
	%43 = phi i32 [ %37, %36 ], [ %40, %44 ]
	br label %9
44:
	br label %42
45:
	%46 = icmp ne i32 %40, %27
	br i1 %46, label %47, label %49
47:
	%48 = add i32 %27, %40
	br label %36
49:
	br label %36
50:
	call void @printInt(i32 %13)
	br label %51
51:
	call void @printInt(i32 %8)
	call void @printInt(i32 %12)
	call void @printInt(i32 %11)
	call void @printInt(i32 %10)
	%52 = call i32 @funcDef_1(i32 %10, i32 %11)
	%53 = call i32 @funcDef_0(i32 %12)
	%54 = call i32 @funcDef_1(i32 %52, i32 %53)
	call void @funcDef_void()
	call void @printInt(i32 %52)
	call void @printInt(i32 %54)
	%55 = call i32 @funcDef_1(i32 -10, i32 0)
	%56 = load i32, i32 13
	%57 = load i32, i32 3
	%58 = call i32 @funcDef_1(i32 %56, i32 %57)
	%59 = call i32 @funcDef_1(i32 %55, i32 %58)
	call void @printInt(i32 %59)
	ret i32 0
}
