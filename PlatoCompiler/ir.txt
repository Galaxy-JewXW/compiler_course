declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [8 x i8] c"hello? \00", align 1
@.s.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.s.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.3 = private unnamed_addr constant [15 x i8] c"func3 input = \00", align 1
@.s.4 = private unnamed_addr constant [13 x i8] c"func1 done!\0A\00", align 1
@.s.5 = private unnamed_addr constant [13 x i8] c"func2 done!\0A\00", align 1
@.s.6 = private unnamed_addr constant [13 x i8] c"func3 done!\0A\00", align 1
@.s.7 = private unnamed_addr constant [13 x i8] c"func4 done!\0A\00", align 1

@AZ = dso_local global i32 100
@AZA1 = dso_local global i32 200
@AZA2 = dso_local global i32 300

define dso_local i32 @main() {
0:
	br label %1
1:
	br label %2
2:
	br label %4
3:
	br label %8
4:
	br label %5
5:
	br label %6
6:
	%7 = call i32 @getint()
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %7)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %7)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %7)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	br label %3
8:
	br label %9
9:
	br label %10
10:
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.4, i64 0, i64 0))
	br label %11
11:
	br label %12
12:
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.5, i64 0, i64 0))
	br label %13
13:
	call void @putstr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.s.3, i64 0, i64 0))
	call void @putint(i32 0)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	%14 = zext i1 0 to i32
	%15 = icmp ne i32 %14, 0
	br i1 %15, label %16, label %17
16:
	br label %17
17:
	br label %18
18:
	br label %19
19:
	br label %20
20:
	br label %21
21:
	br label %22
22:
	br label %23
23:
	br label %24
24:
	br label %25
25:
	br label %26
26:
	br label %27
27:
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.6, i64 0, i64 0))
	br label %28
28:
	%29 = load i32, i32* @AZ
	%30 = load i32, i32* @AZA1
	%31 = mul i32 %29, %30
	%32 = load i32, i32* @AZA2
	%33 = srem i32 %31, %32
	%34 = add i32 %33, 4
	br label %35
35:
	br label %36
36:
	br label %37
37:
	br label %38
38:
	%39 = sub i32 0, 100
	%40 = sub i32 0, %39
	%41 = mul i32 100, %34
	%42 = sdiv i32 %41, %34
	%43 = srem i32 %42, 100
	%44 = add i32 %42, %43
	%45 = sub i32 %42, %43
	call void @putint(i32 %34)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %34)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 100)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %40)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %41)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %42)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %43)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %44)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %45)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	br label %46
46:
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.7, i64 0, i64 0))
	ret i32 0
}
