declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [10 x i8] c"22373040\0A\00", align 1
@.s.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.2 = private unnamed_addr constant [16 x i8] c"Input integer: \00", align 1
@.s.3 = private unnamed_addr constant [18 x i8] c"Input character: \00", align 1
@.s.4 = private unnamed_addr constant [14 x i8] c"i is 4 or 9!\0A\00", align 1
@.s.5 = private unnamed_addr constant [10 x i8] c"j is 32!\0A\00", align 1
@.s.6 = private unnamed_addr constant [24 x i8] c"Sum of array elements: \00", align 1
@.s.7 = private unnamed_addr constant [16 x i8] c"Test finished!\0A\00", align 1

@MAX_SIZE = dso_local global i32 10
@global_var = dso_local global i32 0
@str = dso_local global [10 x i8] [i8 51, i8 39, zeroinitializer]

define dso_local i32 @main() {
0:
	br label %1
1:
	%2 = load i32, i32* @global_var
	%3 = add i32 %2, 1
	store i32* @global_var, i32 %3
	%4 = load i32, i32* @global_var
	%5 = icmp ne i32 %4, 0
	br i1 %5, label %6, label %7
6:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.s.0, i64 0, i64 0))
	br label %7
7:
	br label %8
8:
	%9 = call i32 @getint()
	%10 = call i32 @getchar()
	%11 = trunc i32 %10 to i8
	call void @putstr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.s.2, i64 0, i64 0))
	call void @putint(i32 %9)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	%12 = zext i8 %11 to i32
	call void @putstr(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.s.3, i64 0, i64 0))
	%13 = trunc i32 %12 to i8
	call void @putch(i8 %13)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	%14 = alloca [10 x i32]
	%15 = alloca [12 x i8]
	%16 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 0
	store i8* %16, i8 113
	%17 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 1
	store i8* %17, i8 119
	%18 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 2
	store i8* %18, i8 101
	%19 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 3
	store i8* %19, i8 114
	%20 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 4
	store i8* %20, i8 116
	%21 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 5
	store i8* %21, i8 121
	%22 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 6
	store i8* %22, i8 117
	%23 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 7
	store i8* %23, i8 105
	%24 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 8
	store i8* %24, i8 111
	%25 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 9
	store i8* %25, i8 112
	%26 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 10
	store i8* %26, i8 10
	%27 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 11
	store i8* %27, i8 0
	%28 = alloca [10 x i8]
	%29 = getelementptr inbounds [10 x i8], [10 x i8]* %28, i32 0, i32 0
	store i8* %29, i32 115
	%30 = getelementptr inbounds [10 x i8], [10 x i8]* %28, i32 0, i32 1
	store i8* %30, i32 116
	%31 = getelementptr inbounds [10 x i8], [10 x i8]* %28, i32 0, i32 2
	store i8* %31, i32 114
	%32 = getelementptr inbounds [10 x i8], [10 x i8]* %28, i32 0, i32 3
	store i8* %32, i32 0
	br label %33
33:
	%34 = phi i32 [ 0, %8 ], [ %70, %69 ]
	%35 = icmp slt i32 %34, 10
	br i1 %35, label %36, label %39
36:
	%37 = getelementptr inbounds [10 x i32], [10 x i32]* %14, i32 0, i32 %34
	store i32* %37, i32 %34
	%38 = icmp eq i32 %34, 4
	br i1 %38, label %52, label %50
39:
	%40 = alloca [20 x i32]
	%41 = getelementptr inbounds [20 x i32], [20 x i32]* %40, i32 0, i32 0
	store i32* %41, i32 3
	%42 = getelementptr inbounds [20 x i32], [20 x i32]* %40, i32 0, i32 1
	store i32* %42, i32 2
	%43 = getelementptr inbounds [20 x i32], [20 x i32]* %40, i32 0, i32 2
	store i32* %43, i32 1
	br label %74
44:
	call void @putstr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.s.4, i64 0, i64 0))
	br label %55
45:
	%46 = sdiv i32 %34, 2
	%47 = mul i32 %46, 2
	%48 = sub i32 %34, %47
	%49 = icmp eq i32 %48, 0
	br i1 %49, label %67, label %68
50:
	%51 = icmp sge i32 %34, 9
	br i1 %51, label %44, label %45
52:
	%53 = zext i8 %11 to i32
	%54 = icmp slt i32 %34, %53
	br i1 %54, label %44, label %50
55:
	%56 = phi i32 [ 1, %44 ], [ %56, %65 ], [ %64, %63 ]
	br label %57
57:
	%58 = icmp sgt i32 %56, 100
	br i1 %58, label %60, label %61
59:
	br label %45
60:
	br label %59
61:
	%62 = icmp ne i32 %56, 32
	br i1 %62, label %65, label %66
63:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.s.5, i64 0, i64 0))
	%64 = add i32 %56, %56
	br label %55
65:
	br label %55
66:
	br label %63
67:
	br label %71
68:
	br label %69
69:
	%70 = add i32 %34, 1
	br label %33
71:
	br label %72
72:
	br label %73
73:
	br label %69
74:
	%75 = phi i32 [ 0, %39 ], [ %112, %110 ]
	%76 = phi i32 [ 0, %39 ], [ %111, %110 ]
	%77 = icmp slt i32 %75, 10
	br i1 %77, label %78, label %80
78:
	%79 = icmp slt i32 %75, 3
	br i1 %79, label %106, label %110
80:
	call void @putstr(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.s.6, i64 0, i64 0))
	call void @putint(i32 %76)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	%81 = getelementptr inbounds [10 x i32], [10 x i32]* %14, i32 0, i32 0
	br label %82
82:
	%83 = getelementptr inbounds i32, i32* %81, i32 0
	%84 = load i32, i32* %83
	br label %85
85:
	%86 = add i32 %34, %84
	br label %87
87:
	%88 = getelementptr inbounds i32, i32* %81, i32 1
	%89 = load i32, i32* %88
	%90 = sub i32 %34, %89
	%91 = mul i32 %86, %90
	%92 = getelementptr inbounds i32, i32* %81, i32 2
	%93 = load i32, i32* %92
	%94 = sdiv i32 %91, %93
	%95 = srem i32 %94, %34
	%96 = sub i32 %95, -3
	%97 = add i32 %96, 6
	%98 = icmp sle i32 %97, 5
	br i1 %98, label %99, label %100
99:
	br label %101
100:
	br label %101
101:
	%102 = phi i32 [ 1, %99 ], [ 0, %100 ], [ -1, %107 ]
	%103 = icmp eq i32 0, %102
	%104 = zext i1 %103 to i32
	%105 = icmp ne i32 %104, 0
	br i1 %105, label %113, label %125
106:
	%107 = getelementptr inbounds [20 x i32], [20 x i32]* %40, i32 0, i32 %75
	%108 = load i32, i32* %107
	%109 = add i32 %76, %108
	br label %110
110:
	%111 = phi i32 [ %76, %78 ], [ %109, %106 ]
	%112 = add i32 %75, 1
	br label %74
113:
	%114 = getelementptr inbounds [12 x i8], [12 x i8]* %15, i32 0, i32 0
	br label %115
115:
	%116 = getelementptr inbounds i8, i8* %114, i32 0
	%117 = load i8, i8* %116
	%118 = zext i8 %117 to i32
	br label %119
119:
	%120 = zext i32 %118 to i32
	br label %121
121:
	%122 = zext i32 %120 to i32
	%123 = trunc i32 %122 to i8
	call void @putch(i8 %123)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	br label %124
124:
	br label %125
125:
	call void @putstr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.s.7, i64 0, i64 0))
	ret i32 0
}
