declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [10 x i8] c"21373457\0A\00", align 1
@.s.1 = private unnamed_addr constant [17 x i8] c"Empty for pass!\0A\00", align 1
@.s.2 = private unnamed_addr constant [20 x i8] c"One stmt for pass!\0A\00", align 1
@.s.3 = private unnamed_addr constant [40 x i8] c"Basic for and no params function pass!\0A\00", align 1
@.s.4 = private unnamed_addr constant [33 x i8] c"Please input 5 number (no zero)\0A\00", align 1
@.s.5 = private unnamed_addr constant [41 x i8] c"Basic for and one params function pass!\0A\00", align 1
@.s.6 = private unnamed_addr constant [46 x i8] c"Basic for and multiple params function pass!\0A\00", align 1
@.s.7 = private unnamed_addr constant [28 x i8] c"Recursive Success, count = \00", align 1
@.s.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.9 = private unnamed_addr constant [80 x i8] c"This C level file include decl, if, for ,continue, break, basic cond. No block\0A\00", align 1
@.s.10 = private unnamed_addr constant [14 x i8] c"Pass Success!\00", align 1

@c = dso_local global i32 10
@x = dso_local global i32 0

define dso_local void @f1() {
0:
	%1 = alloca i32
	store i32* %1, i32 0
	br label %2
2:
	%3 = load i32, i32* %1
	%4 = icmp slt i32 %3, 5
	br i1 %4, label %5, label %10
5:
	%6 = load i32, i32* @x
	%7 = add i32 %6, 1
	store i32* @x, i32 %7
	%8 = load i32, i32* %1
	%9 = add i32 %8, 1
	store i32* %1, i32 %9
	br label %2
10:
	ret void
}

define dso_local i32 @f2() {
0:
	%1 = load i32, i32* @x
	%2 = icmp sgt i32 %1, 0
	br i1 %2, label %3, label %5
3:
	%4 = sub i32 0, 1
	ret i32 %4
5:
	ret i32 1
}

define dso_local void @f3(i32 %0) {
1:
	%2 = alloca i32
	store i32* %2, i32 %0
	%3 = load i32, i32* %2
	store i32* @x, i32 %3
	ret void
}

define dso_local i32 @f4(i32 %0) {
1:
	%2 = alloca i32
	store i32* %2, i32 %0
	%3 = load i32, i32* %2
	%4 = icmp sgt i32 %3, 0
	br i1 %4, label %5, label %7
5:
	%6 = load i32, i32* %2
	ret i32 %6
7:
	%8 = load i32, i32* %2
	%9 = sub i32 0, %8
	ret i32 %9
}

define dso_local i32 @f5(i32 %0, i32 %1, i32 %2) {
3:
	%4 = alloca i32
	store i32* %4, i32 %0
	%5 = alloca i32
	store i32* %5, i32 %1
	%6 = alloca i32
	store i32* %6, i32 %2
	%7 = load i32, i32* %4
	%8 = load i32, i32* %5
	%9 = icmp sgt i32 %7, %8
	br i1 %9, label %10, label %14
10:
	%11 = load i32, i32* %4
	%12 = load i32, i32* %6
	%13 = icmp sgt i32 %11, %12
	br i1 %13, label %18, label %20
14:
	%15 = load i32, i32* %5
	%16 = load i32, i32* %6
	%17 = icmp sgt i32 %15, %16
	br i1 %17, label %22, label %26
18:
	%19 = load i32, i32* %4
	ret i32 %19
20:
	%21 = load i32, i32* %6
	ret i32 %21
22:
	%23 = load i32, i32* %5
	%24 = load i32, i32* %4
	%25 = icmp sgt i32 %23, %24
	br i1 %25, label %30, label %32
26:
	%27 = load i32, i32* %6
	%28 = load i32, i32* %4
	%29 = icmp sgt i32 %27, %28
	br i1 %29, label %34, label %38
30:
	%31 = load i32, i32* %5
	ret i32 %31
32:
	%33 = load i32, i32* %4
	ret i32 %33
34:
	%35 = load i32, i32* %6
	%36 = load i32, i32* %5
	%37 = icmp sgt i32 %35, %36
	br i1 %37, label %41, label %43
38:
	%39 = load i32, i32* %4
	%40 = call i32 @f4(i32 %39)
	ret i32 %40
41:
	%42 = load i32, i32* %6
	ret i32 %42
43:
	%44 = load i32, i32* %5
	ret i32 %44
}

define dso_local i32 @f6(i32 %0) {
1:
	%2 = alloca i32
	store i32* %2, i32 %0
	%3 = load i32, i32* @x
	%4 = load i32, i32* %2
	%5 = add i32 %3, %4
	store i32* @x, i32 %5
	%6 = load i32, i32* %2
	%7 = icmp eq i32 %6, 0
	br i1 %7, label %8, label %9
8:
	ret i32 0
9:
	%10 = load i32, i32* %2
	%11 = sub i32 %10, 1
	%12 = call i32 @f6(i32 %11)
	ret i32 %12
}

define dso_local i32 @main() {
0:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.s.0, i64 0, i64 0))
	%1 = alloca i32
	%2 = alloca i32
	store i32* %2, i32 5
	%3 = alloca i32
	store i32* %1, i32 0
	br label %4
4:
	%5 = load i32, i32* %1
	%6 = icmp slt i32 %5, 5
	br i1 %6, label %7, label %10
7:
	%8 = load i32, i32* %1
	%9 = add i32 %8, 1
	store i32* %1, i32 %9
	br label %4
10:
	%11 = load i32, i32* %1
	%12 = icmp eq i32 %11, 5
	br i1 %12, label %13, label %14
13:
	call void @putstr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.s.1, i64 0, i64 0))
	br label %14
14:
	store i32* %1, i32 0
	br label %15
15:
	%16 = load i32, i32* %1
	%17 = icmp slt i32 %16, 2
	br i1 %17, label %18, label %21
18:
	%19 = load i32, i32* %1
	%20 = add i32 %19, 1
	store i32* %1, i32 %20
	br label %15
21:
	store i32* %1, i32 2
	br label %22
22:
	br label %23
23:
	%24 = load i32, i32* %1
	%25 = icmp eq i32 %24, 4
	br i1 %25, label %27, label %28
26:
	br label %31
27:
	br label %26
28:
	%29 = load i32, i32* %1
	%30 = add i32 %29, 1
	store i32* %1, i32 %30
	br label %22
31:
	%32 = load i32, i32* %1
	%33 = icmp slt i32 %32, 5
	br i1 %33, label %34, label %37
34:
	%35 = load i32, i32* %1
	%36 = icmp slt i32 %35, 5
	br i1 %36, label %38, label %39
37:
	store i32* %1, i32 5
	br label %44
38:
	br label %31
39:
	%40 = load i32, i32* %1
	%41 = add i32 %40, 2
	store i32* %1, i32 %41
	%42 = load i32, i32* %1
	%43 = add i32 %42, 1
	store i32* %1, i32 %43
	br label %31
44:
	br label %45
45:
	%46 = load i32, i32* %1
	%47 = add i32 %46, 1
	store i32* %1, i32 %47
	%48 = load i32, i32* %1
	%49 = icmp eq i32 %48, 6
	br i1 %49, label %51, label %52
50:
	br label %53
51:
	br label %50
52:
	br label %44
53:
	%54 = load i32, i32* %1
	%55 = icmp slt i32 %54, 7
	br i1 %55, label %56, label %59
56:
	%57 = load i32, i32* %1
	%58 = add i32 %57, 1
	store i32* %1, i32 %58
	br label %53
59:
	br label %60
60:
	br label %61
61:
	%62 = load i32, i32* %1
	%63 = icmp eq i32 %62, 8
	br i1 %63, label %65, label %66
64:
	br label %69
65:
	br label %64
66:
	%67 = load i32, i32* %1
	%68 = add i32 %67, 1
	store i32* %1, i32 %68
	br label %60
69:
	br label %70
70:
	%71 = load i32, i32* %1
	%72 = add i32 %71, 1
	store i32* %1, i32 %72
	%73 = load i32, i32* %1
	%74 = icmp eq i32 %73, 10
	br i1 %74, label %78, label %79
75:
	call void @f1()
	%76 = load i32, i32* @x
	%77 = icmp eq i32 %76, 5
	br i1 %77, label %80, label %84
78:
	call void @putstr(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.s.2, i64 0, i64 0))
	br label %75
79:
	br label %69
80:
	%81 = call i32 @f2()
	%82 = sub i32 0, 1
	%83 = icmp eq i32 %81, %82
	br i1 %83, label %86, label %87
84:
	call void @putstr(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.s.4, i64 0, i64 0))
	%85 = sub i32 0, 1
	store i32* @x, i32 %85
	store i32* %1, i32 0
	br label %88
86:
	call void @putstr(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.s.3, i64 0, i64 0))
	br label %87
87:
	br label %84
88:
	%89 = load i32, i32* %1
	%90 = load i32, i32* %1
	%91 = mul i32 %89, %90
	%92 = load i32, i32* %2
	%93 = load i32, i32* %2
	%94 = mul i32 %92, %93
	%95 = sub i32 5, 4
	%96 = sdiv i32 %94, %95
	%97 = icmp slt i32 %91, %96
	br i1 %97, label %98, label %104
98:
	%99 = call i32 @getint()
	store i32* %3, i32 %99
	%100 = load i32, i32* %3
	%101 = call i32 @f4(i32 %100)
	call void @f3(i32 %101)
	%102 = load i32, i32* @x
	%103 = icmp slt i32 %102, 0
	br i1 %103, label %107, label %108
104:
	%105 = load i32, i32* @x
	%106 = icmp sge i32 %105, 0
	br i1 %106, label %117, label %118
107:
	br label %104
108:
	%109 = load i32, i32* @x
	%110 = icmp sgt i32 %109, 0
	br i1 %110, label %111, label %112
111:
	br label %88
112:
	%113 = load i32, i32* %1
	%114 = add i32 %113, 1
	store i32* %1, i32 %114
	%115 = load i32, i32* %1
	%116 = add i32 %115, 1
	store i32* %1, i32 %116
	br label %88
117:
	call void @putstr(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.s.5, i64 0, i64 0))
	br label %118
118:
	store i32* %1, i32 10
	store i32* %2, i32 5
	store i32* %3, i32 7
	%119 = load i32, i32* %1
	%120 = load i32, i32* %2
	%121 = load i32, i32* %3
	%122 = call i32 @f5(i32 %119, i32 %120, i32 %121)
	%123 = load i32, i32* %1
	%124 = icmp eq i32 %122, %123
	br i1 %124, label %125, label %126
125:
	call void @putstr(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.s.6, i64 0, i64 0))
	br label %126
126:
	store i32* @x, i32 0
	%127 = load i32, i32* @c
	%128 = call i32 @f6(i32 %127)
	%129 = load i32, i32* @x
	call void @putstr(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.s.7, i64 0, i64 0))
	call void @putint(i32 %129)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.8, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.s.9, i64 0, i64 0))
	call void @putstr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.s.10, i64 0, i64 0))
	ret i32 0
}
