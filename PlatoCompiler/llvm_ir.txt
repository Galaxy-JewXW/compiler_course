declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [10 x i8] c"22373040\0A\00", align 1
@.s.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.2 = private unnamed_addr constant [16 x i8] c"Input integer: \00", align 1
@.s.3 = private unnamed_addr constant [18 x i8] c"Input character: \00", align 1
@.s.4 = private unnamed_addr constant [14 x i8] c"i is 4 or 9!\0A\00", align 1
@.s.5 = private unnamed_addr constant [10 x i8] c"j is 32!\0A\00", align 1
@.s.6 = private unnamed_addr constant [24 x i8] c"Sum of array elements: \00", align 1
@.s.7 = private unnamed_addr constant [16 x i8] c"Test finished!\0A\00", align 1

@MAX_SIZE = dso_local global i32 10
@global_var = dso_local global i32 0
@str = dso_local global [10 x i8] [i8 51, i8 39, zeroinitializer]

define dso_local i32 @add(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32* %3, i32 %0
	%4 = alloca i32
	store i32* %4, i32 %1
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = add i32 %5, %6
	ret i32 %7
}

define dso_local i32 @calculate(i32 %0, i32* %1) {
2:
	%3 = alloca i32
	store i32* %3, i32 %0
	%4 = alloca i32
	%5 = load i32, i32* %3
	%6 = getelementptr inbounds i32, i32* %1, i32 0
	%7 = load i32, i32* %6
	%8 = call i32 @add(i32 %5, i32 %7)
	%9 = load i32, i32* %3
	%10 = getelementptr inbounds i32, i32* %1, i32 1
	%11 = load i32, i32* %10
	%12 = sub i32 %9, %11
	%13 = mul i32 %8, %12
	%14 = getelementptr inbounds i32, i32* %1, i32 2
	%15 = load i32, i32* %14
	%16 = sdiv i32 %13, %15
	%17 = load i32, i32* %3
	%18 = srem i32 %16, %17
	%19 = sub i32 0, 3
	%20 = sub i32 0, %19
	%21 = sub i32 0, %20
	%22 = sub i32 %18, %21
	%23 = sub i32 0, 6
	%24 = sub i32 0, %23
	%25 = add i32 %22, %24
	store i32* %4, i32 %25
	%26 = load i32, i32* %4
	%27 = icmp sle i32 %26, 5
	br i1 %27, label %28, label %29
28:
	ret i32 1
	br label %30
29:
	ret i32 0
	br label %30
30:
	%31 = sub i32 0, 1
	ret i32 %31
}

define dso_local void @printName() {
0:
	%1 = load i32, i32* @global_var
	%2 = add i32 %1, 1
	store i32* @global_var, i32 %2
	%3 = load i32, i32* @global_var
	%4 = icmp ne i32 %3, 0
	br i1 %4, label %5, label %6
5:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.s.0, i64 0, i64 0))
	br label %6
6:
	ret void
}

define dso_local void @print(i8 %0) {
1:
	%2 = alloca i8
	store i8* %2, i8 %0
	%3 = load i8, i8* %2
	%4 = zext i8 %3 to i32
	%5 = trunc i32 %4 to i8
	call void @putch(i8 %5)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	ret void
}

define dso_local i8 @get_first(i8* %0) {
1:
	%2 = getelementptr inbounds i8, i8* %0, i32 0
	%3 = load i8, i8* %2
	%4 = zext i8 %3 to i32
	ret i32 %4
}

define dso_local i32 @main() {
0:
	call void @printName()
	%1 = alloca i32
	store i32* %1, i32 0
	%2 = alloca i32
	store i32* %2, i32 8
	%3 = alloca i8
	%4 = call i32 @getint()
	store i32* %1, i32 %4
	%5 = call i32 @getchar()
	%6 = trunc i32 %5 to i8
	store i8* %3, i8 %6
	%7 = load i32, i32* %1
	call void @putstr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.s.2, i64 0, i64 0))
	call void @putint(i32 %7)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	%8 = load i8, i8* %3
	%9 = zext i8 %8 to i32
	call void @putstr(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.s.3, i64 0, i64 0))
	%10 = trunc i32 %9 to i8
	call void @putch(i8 %10)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	%11 = alloca i32
	store i32* %11, i32 5
	%12 = alloca [10 x i32]
	%13 = alloca [12 x i8]
	%14 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 0
	store i8* %14, i8 113
	%15 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 1
	store i8* %15, i8 119
	%16 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 2
	store i8* %16, i8 101
	%17 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 3
	store i8* %17, i8 114
	%18 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 4
	store i8* %18, i8 116
	%19 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 5
	store i8* %19, i8 121
	%20 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 6
	store i8* %20, i8 117
	%21 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 7
	store i8* %21, i8 105
	%22 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 8
	store i8* %22, i8 111
	%23 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 9
	store i8* %23, i8 112
	%24 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 10
	store i8* %24, i8 10
	%25 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 11
	store i8* %25, i8 0
	%26 = alloca [10 x i8]
	%27 = getelementptr inbounds [10 x i8], [10 x i8]* %26, i32 0, i32 0
	store i8* %27, i32 115
	%28 = getelementptr inbounds [10 x i8], [10 x i8]* %26, i32 0, i32 1
	store i8* %28, i32 116
	%29 = getelementptr inbounds [10 x i8], [10 x i8]* %26, i32 0, i32 2
	store i8* %29, i32 114
	%30 = getelementptr inbounds [10 x i8], [10 x i8]* %26, i32 0, i32 3
	store i8* %30, i32 0
	store i32* %1, i32 0
	br label %31
31:
	%32 = load i32, i32* %1
	%33 = load i32, i32* @MAX_SIZE
	%34 = icmp slt i32 %32, %33
	br i1 %34, label %35, label %41
35:
	%36 = load i32, i32* %1
	%37 = getelementptr inbounds [10 x i32], [10 x i32]* %12, i32 0, i32 %36
	%38 = load i32, i32* %1
	store i32* %37, i32 %38
	%39 = load i32, i32* %1
	%40 = icmp eq i32 %39, 4
	br i1 %40, label %57, label %54
41:
	%42 = alloca [20 x i32]
	%43 = getelementptr inbounds [20 x i32], [20 x i32]* %42, i32 0, i32 0
	store i32* %43, i32 3
	%44 = getelementptr inbounds [20 x i32], [20 x i32]* %42, i32 0, i32 1
	store i32* %44, i32 2
	%45 = getelementptr inbounds [20 x i32], [20 x i32]* %42, i32 0, i32 2
	store i32* %45, i32 1
	%46 = alloca i32
	store i32* %46, i32 0
	%47 = alloca i32
	store i32* %47, i32 0
	br label %85
48:
	call void @putstr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.s.4, i64 0, i64 0))
	%49 = alloca i32
	store i32* %49, i32 1
	br label %62
50:
	%51 = load i32, i32* %1
	%52 = srem i32 %51, 2
	%53 = icmp eq i32 %52, 0
	br i1 %53, label %77, label %78
54:
	%55 = load i32, i32* %1
	%56 = icmp sge i32 %55, 9
	br i1 %56, label %48, label %50
57:
	%58 = load i32, i32* %1
	%59 = load i8, i8* %3
	%60 = zext i8 %59 to i32
	%61 = icmp slt i32 %58, %60
	br i1 %61, label %48, label %54
62:
	br label %63
63:
	%64 = load i32, i32* %49
	%65 = icmp sgt i32 %64, 100
	br i1 %65, label %67, label %68
66:
	br label %50
67:
	br label %66
	br label %71
68:
	%69 = load i32, i32* %49
	%70 = icmp ne i32 %69, 32
	br i1 %70, label %75, label %76
71:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.s.5, i64 0, i64 0))
	%72 = load i32, i32* %49
	%73 = load i32, i32* %49
	%74 = add i32 %72, %73
	store i32* %49, i32 %74
	br label %62
75:
	br label %62
	br label %76
76:
	br label %71
77:
	br label %82
78:
	br label %79
79:
	%80 = load i32, i32* %1
	%81 = add i32 %80, 1
	store i32* %1, i32 %81
	br label %31
82:
	br label %83
83:
	br label %84
	br label %82
84:
	br label %79
85:
	%86 = load i32, i32* %47
	%87 = load i32, i32* @MAX_SIZE
	%88 = icmp slt i32 %86, %87
	br i1 %88, label %89, label %92
89:
	%90 = load i32, i32* %47
	%91 = icmp slt i32 %90, 3
	br i1 %91, label %100, label %106
92:
	%93 = load i32, i32* %46
	call void @putstr(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.s.6, i64 0, i64 0))
	call void @putint(i32 %93)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	%94 = load i32, i32* %1
	%95 = getelementptr inbounds [10 x i32], [10 x i32]* %12, i32 0, i32 0
	%96 = call i32 @calculate(i32 %94, i32* %95)
	%97 = icmp eq i32 0, %96
	%98 = zext i1 %97 to i32
	%99 = icmp ne i32 %98, 0
	br i1 %99, label %109, label %113
100:
	%101 = load i32, i32* %46
	%102 = load i32, i32* %47
	%103 = getelementptr inbounds [20 x i32], [20 x i32]* %42, i32 0, i32 %102
	%104 = load i32, i32* %103
	%105 = add i32 %101, %104
	store i32* %46, i32 %105
	br label %106
106:
	%107 = load i32, i32* %47
	%108 = add i32 %107, 1
	store i32* %47, i32 %108
	br label %85
109:
	%110 = getelementptr inbounds [12 x i8], [12 x i8]* %13, i32 0, i32 0
	%111 = call i8 @get_first(i8* %110)
	%112 = zext i8 %111 to i32
	call void @print(i32 %112)
	br label %113
113:
	call void @putstr(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.s.7, i64 0, i64 0))
	ret i32 0
}
