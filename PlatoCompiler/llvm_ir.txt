declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.s.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.s.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.3 = private unnamed_addr constant [14 x i8] c"global init: \00", align 1

@ga = dso_local global i32 0
@gb = dso_local global i32 0
@gc = dso_local global i32 0

define dso_local i32 @add(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = add i32 %5, %6
	ret i32 %7
}

define dso_local i32 @sub(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = sub i32 %5, %6
	store i32 %7, i32* %4
	%8 = load i32, i32* %4
	ret i32 %8
}

define dso_local i32 @mult(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	%6 = load i32, i32* %3
	%7 = load i32, i32* %4
	%8 = mul i32 %6, %7
	store i32 %8, i32* %5
	%9 = load i32, i32* %5
	ret i32 %9
}

define dso_local void @addGaGb(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* @ga
	%4 = load i32, i32* %2
	%5 = call i32 @add(i32 %3, i32 %4)
	store i32 %5, i32* @ga
	%6 = load i32, i32* @gb
	%7 = load i32, i32* %2
	%8 = sub i32 0, %7
	%9 = call i32 @sub(i32 %6, i32 %8)
	store i32 %9, i32* @gb
	ret void
}

define dso_local void @addGaGbGc(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	%4 = load i32, i32* %2
	%5 = call i32 @sub(i32 %3, i32 %4)
	%6 = load i32, i32* %2
	%7 = call i32 @add(i32 0, i32 1)
	%8 = call i32 @mult(i32 %6, i32 %7)
	%9 = add i32 %5, %8
	call void @addGaGb(i32 %9)
	%10 = load i32, i32* @gc
	%11 = load i32, i32* %2
	%12 = call i32 @mult(i32 1, i32 %11)
	%13 = load i32, i32* %2
	%14 = load i32, i32* %2
	%15 = call i32 @add(i32 %13, i32 %14)
	%16 = add i32 %12, %15
	%17 = load i32, i32* %2
	%18 = mul i32 2, %17
	%19 = call i32 @sub(i32 0, i32 %18)
	%20 = add i32 %16, %19
	%21 = call i32 @add(i32 %10, i32 %20)
	store i32 %21, i32* @gc
	ret void
}

define dso_local void @publish(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	%4 = load i32, i32* @ga
	%5 = load i32, i32* @gb
	%6 = load i32, i32* @gc
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %4)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %5)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %6)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	ret void
}

define dso_local i32 @main() {
0:
	%1 = load i32, i32* @ga
	%2 = load i32, i32* @gb
	%3 = load i32, i32* @gc
	call void @putstr(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.s.3, i64 0, i64 0))
	call void @putint(i32 %1)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %2)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	%4 = alloca i32
	store i32 13, i32* %4
	%5 = alloca i32
	%6 = load i32, i32* %4
	%7 = add i32 %6, 7
	store i32 %7, i32* %5
	%8 = load i32, i32* %5
	call void @addGaGb(i32 %8)
	call void @publish(i32 1)
	%9 = load i32, i32* %5
	%10 = sub i32 %9, 20
	%11 = load i32, i32* %5
	%12 = sub i32 %11, 10
	%13 = mul i32 %12, 3
	%14 = add i32 %10, %13
	call void @addGaGbGc(i32 %14)
	call void @publish(i32 2)
	%15 = load i32, i32* %5
	%16 = call i32 @mult(i32 10, i32 %15)
	call void @addGaGbGc(i32 %16)
	call void @publish(i32 3)
	%17 = load i32, i32* %5
	%18 = load i32, i32* %5
	%19 = call i32 @add(i32 %18, i32 50)
	%20 = call i32 @sub(i32 %17, i32 %19)
	%21 = sub i32 0, %20
	%22 = sub i32 0, 1
	%23 = load i32, i32* %5
	%24 = call i32 @mult(i32 %22, i32 %23)
	%25 = mul i32 %21, %24
	%26 = load i32, i32* %5
	%27 = call i32 @add(i32 %26, i32 3)
	%28 = call i32 @mult(i32 %27, i32 2)
	%29 = srem i32 %25, %28
	call void @addGaGbGc(i32 %29)
	call void @publish(i32 4)
	ret i32 0
}
