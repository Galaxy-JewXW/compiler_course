declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [5 x i8] c"j : \00", align 1
@.s.1 = private unnamed_addr constant [7 x i8] c", k : \00", align 1
@.s.2 = private unnamed_addr constant [7 x i8] c", l : \00", align 1
@.s.3 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.4 = private unnamed_addr constant [6 x i8] c"a! = \00", align 1
@.s.5 = private unnamed_addr constant [9 x i8] c", num = \00", align 1
@.s.6 = private unnamed_addr constant [31 x i8] c"scanf a, b to get gcd and lcm\0A\00", align 1
@.s.7 = private unnamed_addr constant [8 x i8] c"gcd is \00", align 1
@.s.8 = private unnamed_addr constant [8 x i8] c"lcm is \00", align 1
@.s.9 = private unnamed_addr constant [26 x i8] c"scanf a to get Fibonacci\0A\00", align 1
@.s.10 = private unnamed_addr constant [8 x i8] c"fib is \00", align 1



define dso_local void @fun1() {
0:
	%1 = alloca i32
	%2 = alloca i32
	store i32 4, i32* %2
	%3 = alloca i32
	store i32 6, i32* %3
	%4 = load i32, i32* %2
	store i32 %4, i32* %3
	store i32 3, i32* %1
	%5 = load i32, i32* %1
	%6 = srem i32 %5, 20
	%7 = sub i32 %6, 1
	%8 = add i32 %7, 9
	store i32 %8, i32* %1
	%9 = alloca i32
	store i32 0, i32* %9
	br label %10
10:
	%11 = load i32, i32* %9
	%12 = icmp sle i32 %11, 7
	br i1 %12, label %13, label %20
13:
	%14 = load i32, i32* %9
	%15 = add i32 %14, 1
	store i32 %15, i32* %9
	%16 = load i32, i32* %1
	%17 = load i32, i32* %9
	%18 = icmp eq i32 %16, %17
	br i1 %18, label %24, label %28
19:
	br label %10
20:
	%21 = load i32, i32* %1
	%22 = load i32, i32* %2
	%23 = load i32, i32* %3
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %21)
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %22)
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.2, i64 0, i64 0))
	call void @putint(i32 %23)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	ret void
24:
	%25 = load i32, i32* %2
	%26 = load i32, i32* %1
	%27 = add i32 %25, %26
	store i32 %27, i32* %2
	br label %19
	br label %28
28:
	%29 = load i32, i32* %1
	%30 = sub i32 %29, 1
	store i32 %30, i32* %1
	br label %19
}

define dso_local i32 @fun2(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = alloca i32
	store i32 1, i32* %3
	%4 = alloca i32
	store i32 1, i32* %4
	br label %5
5:
	%6 = load i32, i32* %2
	%7 = icmp sge i32 %6, 1
	br i1 %7, label %8, label %17
8:
	%9 = load i32, i32* %3
	%10 = load i32, i32* %2
	%11 = mul i32 %9, %10
	store i32 %11, i32* %3
	%12 = load i32, i32* %2
	%13 = sub i32 %12, 1
	store i32 %13, i32* %2
	%14 = load i32, i32* %2
	%15 = icmp eq i32 %14, 1
	br i1 %15, label %20, label %21
16:
	br label %5
17:
	%18 = load i32, i32* %3
	%19 = load i32, i32* %4
	call void @putstr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.s.4, i64 0, i64 0))
	call void @putint(i32 %18)
	call void @putstr(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.s.5, i64 0, i64 0))
	call void @putint(i32 %19)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	ret i32 1
20:
	br label %17
	br label %24
21:
	%22 = load i32, i32* %2
	%23 = icmp ne i32 %22, 1
	br i1 %23, label %25, label %28
24:
	br label %16
25:
	%26 = load i32, i32* %4
	%27 = add i32 %26, 1
	store i32 %27, i32* %4
	br label %28
28:
	br label %24
}

define dso_local i32 @fun3(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = icmp sgt i32 %5, %6
	br i1 %7, label %8, label %10
8:
	%9 = load i32, i32* %3
	ret i32 %9
	br label %14
10:
	%11 = load i32, i32* %3
	%12 = load i32, i32* %4
	%13 = icmp slt i32 %11, %12
	br i1 %13, label %16, label %18
14:
	%15 = load i32, i32* %3
	ret i32 %15
16:
	%17 = load i32, i32* %4
	ret i32 %17
	br label %18
18:
	br label %14
}

define dso_local i32 @gcd(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = load i32, i32* %3
	%6 = load i32, i32* %4
	%7 = srem i32 %5, %6
	%8 = icmp eq i32 %7, 0
	br i1 %8, label %9, label %11
9:
	%10 = load i32, i32* %4
	ret i32 %10
	br label %11
11:
	%12 = load i32, i32* %4
	%13 = load i32, i32* %3
	%14 = load i32, i32* %4
	%15 = srem i32 %13, %14
	%16 = call i32 @gcd(i32 %12, i32 %15)
	ret i32 %16
}

define dso_local i32 @lcm(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	%6 = load i32, i32* %3
	%7 = load i32, i32* %4
	%8 = call i32 @gcd(i32 %6, i32 %7)
	store i32 %8, i32* %5
	%9 = load i32, i32* %3
	%10 = load i32, i32* %4
	%11 = mul i32 %9, %10
	%12 = load i32, i32* %5
	%13 = sdiv i32 %11, %12
	ret i32 %13
}

define dso_local void @fun4(i32 %0, i32 %1, i32 %2) {
3:
	%4 = alloca i32
	store i32 %0, i32* %4
	%5 = alloca i32
	store i32 %1, i32* %5
	%6 = alloca i32
	store i32 %2, i32* %6
	%7 = alloca i32
	%8 = load i32, i32* %4
	%9 = load i32, i32* %5
	%10 = add i32 %8, %9
	%11 = load i32, i32* %6
	%12 = sub i32 %10, %11
	%13 = load i32, i32* %4
	%14 = mul i32 %12, %13
	store i32 %14, i32* %7
	%15 = load i32, i32* %7
	call void @putint(i32 %15)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	ret void
}

define dso_local i32 @fun5(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	%4 = icmp eq i32 %3, 1
	br i1 %4, label %5, label %6
5:
	ret i32 1
	br label %9
6:
	%7 = load i32, i32* %2
	%8 = icmp eq i32 %7, 2
	br i1 %8, label %17, label %18
9:
	%10 = load i32, i32* %2
	%11 = sub i32 %10, 1
	%12 = call i32 @fun5(i32 %11)
	%13 = load i32, i32* %2
	%14 = sub i32 %13, 2
	%15 = call i32 @fun5(i32 %14)
	%16 = add i32 %12, %15
	ret i32 %16
17:
	ret i32 1
	br label %18
18:
	br label %9
}

define dso_local i32 @main() {
0:
	call void @fun1()
	%1 = call i32 @fun2(i32 6)
	%2 = call i32 @fun3(i32 3, i32 6)
	%3 = call i32 @fun3(i32 2, i32 %2)
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	%4 = alloca i32
	%5 = alloca i32
	call void @putstr(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.s.6, i64 0, i64 0))
	%6 = call i32 @getint()
	store i32 %6, i32* %4
	%7 = call i32 @getint()
	store i32 %7, i32* %5
	%8 = load i32, i32* %4
	%9 = load i32, i32* %5
	%10 = call i32 @gcd(i32 %8, i32 %9)
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.7, i64 0, i64 0))
	call void @putint(i32 %10)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	%11 = load i32, i32* %4
	%12 = load i32, i32* %5
	%13 = call i32 @lcm(i32 %11, i32 %12)
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.8, i64 0, i64 0))
	call void @putint(i32 %13)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	%14 = alloca i32
	%15 = call i32 @getint()
	store i32 %15, i32* %14
	%16 = load i32, i32* %14
	call void @fun4(i32 %16, i32 3, i32 10)
	call void @putstr(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.s.9, i64 0, i64 0))
	%17 = alloca i32
	%18 = call i32 @getint()
	store i32 %18, i32* %17
	%19 = load i32, i32* %17
	%20 = call i32 @fun5(i32 %19)
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.10, i64 0, i64 0))
	call void @putint(i32 %20)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
	ret i32 0
}
