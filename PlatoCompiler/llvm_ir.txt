declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [13 x i8] c"print int : \00", align 1
@.s.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.2 = private unnamed_addr constant [10 x i8] c"19373479\0A\00", align 1

@singleConstDecl = dso_local constant i32 23
@singleConstDecl_0 = dso_local constant i32 13
@singleConstDecl_1 = dso_local constant i32 3
@singleVarDecl = dso_local global i32 -10
@singleVarDecl_0 = dso_local global i32 23
@singleVarDecl_1 = dso_local global i32 10
@singleVarDecl_2 = dso_local global i32 0

define dso_local void @funcDef_void() {
b0:
	ret void
}

define dso_local i32 @funcDef_0(i32 %v0) {
b1:
	%v2 = alloca i32
	store i32 %v0, i32* %v2
	%v3 = alloca i32
	%v4 = load i32, i32* %v2
	%v5 = mul i32 %v4, 10
	store i32 %v5, i32* %v3
	%v6 = load i32, i32* %v3
	ret i32 %v6
}

define dso_local i32 @funcDef_1(i32 %v0, i32 %v1) {
b2:
	%v3 = alloca i32
	store i32 %v0, i32* %v3
	%v4 = alloca i32
	store i32 %v1, i32* %v4
	%v5 = alloca i32
	%v6 = load i32, i32* %v3
	%v7 = load i32, i32* %v4
	%v8 = mul i32 %v6, %v7
	store i32 %v8, i32* %v5
	%v9 = alloca i32
	%v10 = alloca i32
	%v11 = load i32, i32* %v4
	%v12 = icmp ne i32 %v11, 0
	br i1 %v12, label %b13, label %b22
b13:
	%v14 = load i32, i32* %v5
	%v15 = load i32, i32* %v3
	%v16 = load i32, i32* %v4
	%v17 = srem i32 %v15, %v16
	%v18 = add i32 %v14, %v17
	store i32 %v18, i32* %v9
	%v19 = load i32, i32* %v3
	%v20 = load i32, i32* %v4
	%v21 = sdiv i32 %v19, %v20
	store i32 %v21, i32* %v10
	br label %b28
b22:
	%v23 = load i32, i32* %v5
	%v24 = load i32, i32* %v3
	%v25 = add i32 %v23, %v24
	store i32 %v25, i32* %v9
	%v26 = load i32, i32* %v3
	%v27 = sdiv i32 %v26, 2
	store i32 %v27, i32* %v10
	br label %b28
b28:
	%v29 = load i32, i32* %v9
	%v30 = load i32, i32* %v5
	%v31 = sub i32 %v29, %v30
	store i32 %v31, i32* %v9
	%v32 = load i32, i32* %v5
	%v33 = load i32, i32* %v9
	%v34 = add i32 %v32, %v33
	%v35 = load i32, i32* %v5
	%v36 = icmp slt i32 %v35, 0
	br i1 %v36, label %b37, label %b40
b37:
	%v38 = load i32, i32* %v5
	%v39 = sub i32 0, %v38
	store i32 %v39, i32* %v5
	br label %b40
b40:
	%v41 = load i32, i32* %v5
	%v42 = add i32 1, %v41
	%v43 = load i32, i32* %v9
	%v44 = load i32, i32* %v10
	%v45 = add i32 %v43, %v44
	%v46 = mul i32 %v42, %v45
	ret i32 %v46
}

define dso_local void @printInt(i32 %v0) {
b1:
	%v2 = alloca i32
	store i32 %v0, i32* %v2
	%v3 = load i32, i32* %v2
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %v3)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	ret void
}

define dso_local i32 @main() {
b0:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.s.2, i64 0, i64 0))
	%v1 = alloca i32
	store i32 10, i32* %v1
	%v2 = alloca i32
	%v3 = alloca i32
	%v4 = alloca i32
	%v5 = alloca i32
	%v6 = call i32 @getint()
	store i32 %v6, i32* %v2
	%v7 = call i32 @getint()
	store i32 %v7, i32* %v3
	%v8 = call i32 @getint()
	store i32 %v8, i32* %v4
	%v9 = call i32 @getint()
	store i32 %v9, i32* %v5
	%v10 = load i32, i32* %v2
	%v11 = icmp sgt i32 %v10, 5
	br i1 %v11, label %b12, label %b13
b12:
	store i32 5, i32* %v2
	br label %b13
b13:
	br label %b14
b14:
	%v15 = load i32, i32* %v1
	%v16 = icmp ne i32 %v15, 0
	br i1 %v16, label %b17, label %b24
b17:
	%v18 = load i32, i32* %v1
	%v19 = sub i32 %v18, 1
	store i32 %v19, i32* %v1
	%v20 = load i32, i32* %v3
	%v21 = load i32, i32* %v1
	%v22 = icmp sge i32 %v20, %v21
	br i1 %v22, label %b29, label %b36
b23:
	br label %b14
b24:
	%v25 = load i32, i32* %v1
	%v26 = icmp eq i32 0, %v25
	%v27 = zext i1 %v26 to i32
	%v28 = icmp ne i32 %v27, 0
	br i1 %v28, label %b73, label %b75
b29:
	%v30 = load i32, i32* %v3
	%v31 = load i32, i32* %v1
	%v32 = add i32 %v31, 1
	%v33 = sdiv i32 %v30, %v32
	%v34 = load i32, i32* %v1
	%v35 = add i32 %v33, %v34
	store i32 %v35, i32* %v3
	br label %b36
b36:
	%v37 = load i32, i32* %v4
	%v38 = load i32, i32* %v1
	%v39 = icmp sle i32 %v37, %v38
	br i1 %v39, label %b40, label %b44
b40:
	%v41 = load i32, i32* %v4
	%v42 = load i32, i32* %v1
	%v43 = mul i32 %v41, %v42
	store i32 %v43, i32* %v4
	br label %b49
b44:
	%v45 = load i32, i32* %v4
	%v46 = load i32, i32* %v1
	%v47 = add i32 %v46, 3
	%v48 = srem i32 %v45, %v47
	store i32 %v48, i32* %v4
	br label %b49
b49:
	br label %b50
b50:
	%v51 = load i32, i32* %v5
	%v52 = load i32, i32* %v4
	%v53 = icmp slt i32 %v51, %v52
	br i1 %v53, label %b54, label %b62
b54:
	%v55 = load i32, i32* %v5
	%v56 = load i32, i32* %v1
	%v57 = add i32 %v55, %v56
	store i32 %v57, i32* %v5
	%v58 = load i32, i32* %v5
	%v59 = load i32, i32* %v2
	%v60 = icmp eq i32 %v58, %v59
	br i1 %v60, label %b63, label %b64
b61:
	br label %b50
b62:
	br label %b23
b63:
	br label %b62
	br label %b64
b64:
	%v65 = load i32, i32* %v5
	%v66 = load i32, i32* %v3
	%v67 = icmp ne i32 %v65, %v66
	br i1 %v67, label %b68, label %b72
b68:
	%v69 = load i32, i32* %v3
	%v70 = load i32, i32* %v5
	%v71 = add i32 %v69, %v70
	store i32 %v71, i32* %v5
	br label %b61
	br label %b72
b72:
	br label %b61
b73:
	%v74 = load i32, i32* %v1
	call void @printInt(i32 %v74)
	br label %b75
b75:
	%v76 = load i32, i32* %v2
	call void @printInt(i32 %v76)
	%v77 = load i32, i32* %v3
	call void @printInt(i32 %v77)
	%v78 = load i32, i32* %v4
	call void @printInt(i32 %v78)
	%v79 = load i32, i32* %v5
	call void @printInt(i32 %v79)
	%v80 = alloca i32
	%v81 = load i32, i32* %v5
	%v82 = load i32, i32* %v4
	%v83 = call i32 @funcDef_1(i32 %v81, i32 %v82)
	store i32 %v83, i32* %v80
	%v84 = alloca i32
	%v85 = load i32, i32* %v80
	%v86 = load i32, i32* %v3
	%v87 = call i32 @funcDef_0(i32 %v86)
	%v88 = call i32 @funcDef_1(i32 %v85, i32 %v87)
	store i32 %v88, i32* %v84
	call void @funcDef_void()
	%v89 = load i32, i32* %v80
	call void @printInt(i32 %v89)
	%v90 = load i32, i32* %v84
	call void @printInt(i32 %v90)
	%v91 = load i32, i32* @singleVarDecl
	%v92 = load i32, i32* @singleVarDecl_2
	%v93 = call i32 @funcDef_1(i32 %v91, i32 %v92)
	%v94 = load i32, i32* @singleConstDecl_0
	%v95 = load i32, i32* @singleConstDecl_1
	%v96 = call i32 @funcDef_1(i32 %v94, i32 %v95)
	%v97 = call i32 @funcDef_1(i32 %v93, i32 %v96)
	store i32 %v97, i32* @singleVarDecl_2
	%v98 = load i32, i32* @singleVarDecl_2
	call void @printInt(i32 %v98)
	ret i32 0
}
