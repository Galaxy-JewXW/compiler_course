declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [10 x i8] c"22371443\0A\00", align 1
@.s.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.2 = private unnamed_addr constant [5 x i8] c"for\0A\00", align 1
@.s.3 = private unnamed_addr constant [21 x i8] c"lack 1, situation 1\0A\00", align 1
@.s.4 = private unnamed_addr constant [21 x i8] c"lack 1, situation 2\0A\00", align 1
@.s.5 = private unnamed_addr constant [25 x i8] c"lack 1, situation 3 and \00", align 1
@.s.6 = private unnamed_addr constant [21 x i8] c"lack 2, situation 1\0A\00", align 1
@.s.7 = private unnamed_addr constant [21 x i8] c"lack 2, situation 2\0A\00", align 1
@.s.8 = private unnamed_addr constant [25 x i8] c"lack 2, situation 3 and \00", align 1

@globalConstInt1 = dso_local constant i32 1
@globalConstChar1 = dso_local constant i8 97
@globalConstInt2 = dso_local constant i32 2
@globalConstInt3 = dso_local constant i32 3
@globalConstChar2 = dso_local constant i8 98
@globalConstChar3 = dso_local constant i8 99
@globalVarInt1 = dso_local global i32 4
@globalVarChar1 = dso_local global i8 100
@globalVarInt2 = dso_local global i32 5
@globalVarInt3 = dso_local global i32 6
@globalVarChar2 = dso_local global i8 101
@globalVarChar3 = dso_local global i8 102

define dso_local void @func1() {
b0:
	%v1 = alloca i32
	store i32 1, i32* %v1
	ret void
}

define dso_local i32 @func2() {
b0:
	ret i32 1
}

define dso_local i8 @func3() {
b0:
	ret i8 97
}

define dso_local void @func4(i32 %v0) {
b1:
	%v2 = alloca i32
	store i32 %v0, i32* %v2
	store i32 11, i32* %v2
	ret void
}

define dso_local i32 @func5(i32 %v0) {
b1:
	%v2 = alloca i32
	store i32 %v0, i32* %v2
	%v3 = load i32, i32* %v2
	ret i32 %v3
}

define dso_local i8 @func6(i32 %v0) {
b1:
	%v2 = alloca i32
	store i32 %v0, i32* %v2
	%v3 = load i32, i32* %v2
	%v4 = add i32 %v3, 1
	store i32 %v4, i32* %v2
	ret i8 97
}

define dso_local i32 @func7(i32 %v0, i8 %v1) {
b2:
	%v3 = alloca i32
	store i32 %v0, i32* %v3
	%v4 = alloca i8
	store i8 %v1, i8* %v4
	%v5 = load i32, i32* %v3
	%v6 = add i32 %v5, 1
	store i32 %v6, i32* %v3
	store i8 97, i8* %v4
	ret i32 0
}

define dso_local i32 @main() {
b0:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.s.0, i64 0, i64 0))
	%v1 = alloca i32
	store i32 1, i32* %v1
	%v2 = alloca i8
	store i8 97, i8* %v2
	%v3 = alloca i32
	%v4 = alloca i32
	%v5 = alloca i8
	%v6 = alloca i8
	%v7 = call i32 @getint()
	store i32 %v7, i32* %v3
	%v8 = call i32 @getchar()
	%v9 = trunc i32 %v8 to i8
	store i8 %v9, i8* %v5
	store i32 2, i32* %v4
	store i8 98, i8* %v6
	%v10 = load i32, i32* %v1
	%v11 = icmp eq i32 %v10, 1
	br i1 %v11, label %b12, label %b14
b12:
	%v13 = load i32, i32* %v1
	call void @putint(i32 %v13)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	br label %b14
b14:
	%v15 = load i32, i32* %v3
	%v16 = icmp ne i32 %v15, 2
	br i1 %v16, label %b17, label %b19
b17:
	%v18 = load i32, i32* %v3
	call void @putint(i32 %v18)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	br label %b21
b19:
	%v20 = load i32, i32* %v3
	call void @putint(i32 %v20)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	br label %b21
b21:
	%v22 = alloca i32
	store i32 1, i32* %v22
	store i32 1, i32* %v22
	br label %b23
b23:
	%v24 = load i32, i32* %v22
	%v25 = icmp slt i32 %v24, 2
	br i1 %v25, label %b26, label %b30
b26:
	call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.2, i64 0, i64 0))
	br label %b27
b27:
	%v28 = load i32, i32* %v22
	%v29 = add i32 %v28, 1
	store i32 %v29, i32* %v22
	br label %b23
b30:
	store i32 1, i32* %v22
	br label %b31
b31:
	%v32 = load i32, i32* %v22
	%v33 = icmp slt i32 %v32, 2
	br i1 %v33, label %b34, label %b36
b34:
	call void @func1()
	call void @putstr(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.s.3, i64 0, i64 0))
	br label %b36
	br label %b35
b35:
	br label %b31
b36:
	br label %b37
b37:
	%v38 = load i32, i32* %v22
	%v39 = icmp slt i32 %v38, 2
	br i1 %v39, label %b40, label %b46
b40:
	%v41 = call i32 @func2()
	%v42 = icmp eq i32 %v41, 1
	br i1 %v42, label %b47, label %b48
b43:
	%v44 = load i32, i32* %v22
	%v45 = add i32 %v44, 1
	store i32 %v45, i32* %v22
	br label %b37
b46:
	store i32 1, i32* %v22
	br label %b49
b47:
	call void @putstr(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.s.4, i64 0, i64 0))
	br label %b46
	br label %b48
b48:
	br label %b43
b49:
	br label %b50
b50:
	%v51 = call i8 @func3()
	call void @putstr(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.s.5, i64 0, i64 0))
	call void @putch(i8 %v51)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	br label %b55
	br label %b52
b52:
	%v53 = load i32, i32* %v22
	%v54 = add i32 %v53, 1
	store i32 %v54, i32* %v22
	br label %b49
b55:
	store i32 1, i32* %v22
	br label %b56
b56:
	br label %b57
b57:
	%v58 = load i32, i32* @globalConstInt1
	call void @func4(i32 %v58)
	call void @putstr(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.s.6, i64 0, i64 0))
	br label %b60
	br label %b59
b59:
	br label %b56
b60:
	br label %b61
b61:
	%v62 = load i32, i32* %v22
	%v63 = icmp slt i32 %v62, 2
	br i1 %v63, label %b64, label %b68
b64:
	%v65 = load i32, i32* @globalConstInt2
	%v66 = call i32 @func5(i32 %v65)
	call void @putstr(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.s.7, i64 0, i64 0))
	br label %b68
	br label %b67
b67:
	br label %b61
b68:
	br label %b69
b69:
	br label %b70
b70:
	%v71 = alloca i8
	%v72 = load i32, i32* @globalConstInt3
	%v73 = call i8 @func6(i32 %v72)
	store i8 %v73, i8* %v71
	%v74 = load i8, i8* %v71
	call void @putstr(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.s.8, i64 0, i64 0))
	call void @putch(i8 %v74)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	br label %b78
	br label %b75
b75:
	%v76 = load i32, i32* %v22
	%v77 = sub i32 %v76, 1
	store i32 %v77, i32* %v22
	br label %b69
b78:
	%v79 = load i32, i32* @globalConstInt1
	%v80 = load i8, i8* @globalConstChar1
	%v81 = call i32 @func7(i32 %v79, i8 %v80)
	ret i32 0
}
