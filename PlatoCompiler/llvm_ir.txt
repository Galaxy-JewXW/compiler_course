declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [13 x i8] c"print int : \00", align 1
@.s.1 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.2 = private unnamed_addr constant [10 x i8] c"19373479\0A\00", align 1

@singleConstDecl = dso_local global i32 23
@singleConstDecl_0 = dso_local global i32 13
@singleConstDecl_1 = dso_local global i32 3
@singleVarDecl = dso_local global i32 -10
@singleVarDecl_0 = dso_local global i32 23
@singleVarDecl_1 = dso_local global i32 10
@singleVarDecl_2 = dso_local global i32 0

define dso_local void @funcDef_void() {
0:
	ret void
}

define dso_local i32 @funcDef_0(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = alloca i32
	%4 = load i32, i32* %2
	%5 = mul i32 %4, 10
	store i32 %5, i32* %3
	%6 = load i32, i32* %3
	ret i32 %6
}

define dso_local i32 @funcDef_1(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32 %0, i32* %3
	%4 = alloca i32
	store i32 %1, i32* %4
	%5 = alloca i32
	%6 = load i32, i32* %3
	%7 = load i32, i32* %4
	%8 = mul i32 %6, %7
	store i32 %8, i32* %5
	%9 = alloca i32
	%10 = alloca i32
	%11 = load i32, i32* %4
	%12 = icmp ne i32 %11, 0
	br i1 %12, label %13, label %22
13:
	%14 = load i32, i32* %5
	%15 = load i32, i32* %3
	%16 = load i32, i32* %4
	%17 = srem i32 %15, %16
	%18 = add i32 %14, %17
	store i32 %18, i32* %9
	%19 = load i32, i32* %3
	%20 = load i32, i32* %4
	%21 = sdiv i32 %19, %20
	store i32 %21, i32* %10
	br label %28
22:
	%23 = load i32, i32* %5
	%24 = load i32, i32* %3
	%25 = add i32 %23, %24
	store i32 %25, i32* %9
	%26 = load i32, i32* %3
	%27 = sdiv i32 %26, 2
	store i32 %27, i32* %10
	br label %28
28:
	%29 = load i32, i32* %9
	%30 = load i32, i32* %5
	%31 = sub i32 %29, %30
	store i32 %31, i32* %9
	%32 = load i32, i32* %5
	%33 = load i32, i32* %9
	%34 = add i32 %32, %33
	%35 = load i32, i32* %5
	%36 = icmp slt i32 %35, 0
	br i1 %36, label %37, label %40
37:
	%38 = load i32, i32* %5
	%39 = sub i32 0, %38
	store i32 %39, i32* %5
	br label %40
40:
	%41 = load i32, i32* %5
	%42 = add i32 1, %41
	%43 = load i32, i32* %9
	%44 = load i32, i32* %10
	%45 = add i32 %43, %44
	%46 = mul i32 %42, %45
	ret i32 %46
}

define dso_local void @printInt(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	ret void
}

define dso_local i32 @main() {
0:
	call void @putstr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.s.2, i64 0, i64 0))
	%1 = alloca i32
	store i32 10, i32* %1
	%2 = alloca i32
	%3 = alloca i32
	%4 = alloca i32
	%5 = alloca i32
	%6 = call i32 @getint()
	store i32 %6, i32* %2
	%7 = call i32 @getint()
	store i32 %7, i32* %3
	%8 = call i32 @getint()
	store i32 %8, i32* %4
	%9 = call i32 @getint()
	store i32 %9, i32* %5
	%10 = load i32, i32* %2
	%11 = icmp sgt i32 %10, 5
	br i1 %11, label %12, label %13
12:
	store i32 5, i32* %2
	br label %13
13:
	br label %14
14:
	%15 = load i32, i32* %1
	%16 = icmp ne i32 %15, 0
	br i1 %16, label %17, label %24
17:
	%18 = load i32, i32* %1
	%19 = sub i32 %18, 1
	store i32 %19, i32* %1
	%20 = load i32, i32* %3
	%21 = load i32, i32* %1
	%22 = icmp sge i32 %20, %21
	br i1 %22, label %29, label %36
23:
	br label %14
24:
	%25 = load i32, i32* %1
	%26 = icmp eq i32 0, %25
	%27 = zext i1 %26 to i32
	%28 = icmp ne i32 %27, 0
	br i1 %28, label %73, label %75
29:
	%30 = load i32, i32* %3
	%31 = load i32, i32* %1
	%32 = add i32 %31, 1
	%33 = sdiv i32 %30, %32
	%34 = load i32, i32* %1
	%35 = add i32 %33, %34
	store i32 %35, i32* %3
	br label %36
36:
	%37 = load i32, i32* %4
	%38 = load i32, i32* %1
	%39 = icmp sle i32 %37, %38
	br i1 %39, label %40, label %44
40:
	%41 = load i32, i32* %4
	%42 = load i32, i32* %1
	%43 = mul i32 %41, %42
	store i32 %43, i32* %4
	br label %49
44:
	%45 = load i32, i32* %4
	%46 = load i32, i32* %1
	%47 = add i32 %46, 3
	%48 = srem i32 %45, %47
	store i32 %48, i32* %4
	br label %49
49:
	br label %50
50:
	%51 = load i32, i32* %5
	%52 = load i32, i32* %4
	%53 = icmp slt i32 %51, %52
	br i1 %53, label %54, label %62
54:
	%55 = load i32, i32* %5
	%56 = load i32, i32* %1
	%57 = add i32 %55, %56
	store i32 %57, i32* %5
	%58 = load i32, i32* %5
	%59 = load i32, i32* %2
	%60 = icmp eq i32 %58, %59
	br i1 %60, label %63, label %64
61:
	br label %50
62:
	br label %23
63:
	br label %62
	br label %64
64:
	%65 = load i32, i32* %5
	%66 = load i32, i32* %3
	%67 = icmp ne i32 %65, %66
	br i1 %67, label %68, label %72
68:
	%69 = load i32, i32* %3
	%70 = load i32, i32* %5
	%71 = add i32 %69, %70
	store i32 %71, i32* %5
	br label %61
	br label %72
72:
	br label %61
73:
	%74 = load i32, i32* %1
	call void @printInt(i32 %74)
	br label %75
75:
	%76 = load i32, i32* %2
	call void @printInt(i32 %76)
	%77 = load i32, i32* %3
	call void @printInt(i32 %77)
	%78 = load i32, i32* %4
	call void @printInt(i32 %78)
	%79 = load i32, i32* %5
	call void @printInt(i32 %79)
	%80 = alloca i32
	%81 = load i32, i32* %5
	%82 = load i32, i32* %4
	%83 = call i32 @funcDef_1(i32 %81, i32 %82)
	store i32 %83, i32* %80
	%84 = alloca i32
	%85 = load i32, i32* %80
	%86 = load i32, i32* %3
	%87 = call i32 @funcDef_0(i32 %86)
	%88 = call i32 @funcDef_1(i32 %85, i32 %87)
	store i32 %88, i32* %84
	call void @funcDef_void()
	%89 = load i32, i32* %80
	call void @printInt(i32 %89)
	%90 = load i32, i32* %84
	call void @printInt(i32 %90)
	%91 = load i32, i32* @singleVarDecl
	%92 = load i32, i32* @singleVarDecl_2
	%93 = call i32 @funcDef_1(i32 %91, i32 %92)
	%94 = load i32, i32* @singleConstDecl_0
	%95 = load i32, i32* @singleConstDecl_1
	%96 = call i32 @funcDef_1(i32 %94, i32 %95)
	%97 = call i32 @funcDef_1(i32 %93, i32 %96)
	store i32 %97, i32* @singleVarDecl_2
	%98 = load i32, i32* @singleVarDecl_2
	call void @printInt(i32 %98)
	ret i32 0
}
