declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [8 x i8] c"hello? \00", align 1
@.s.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.s.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.s.3 = private unnamed_addr constant [15 x i8] c"func3 input = \00", align 1
@.s.4 = private unnamed_addr constant [13 x i8] c"func1 done!\0A\00", align 1
@.s.5 = private unnamed_addr constant [13 x i8] c"func2 done!\0A\00", align 1
@.s.6 = private unnamed_addr constant [13 x i8] c"func3 done!\0A\00", align 1
@.s.7 = private unnamed_addr constant [13 x i8] c"func4 done!\0A\00", align 1

@AZ = dso_local global i32 100
@AZA1 = dso_local global i32 200
@AZA2 = dso_local global i32 300
@az = dso_local global i32 0
@aza = dso_local global i32 100
@azaz1 = dso_local global i32 0
@azaz2 = dso_local global i32 200

define dso_local void @func1() {
0:
	br label %1
1:
	%2 = alloca i32
	store i32 0, i32* %2
	store i32 0, i32* %2
	%3 = load i32, i32* %2
	%4 = mul i32 %3, 8
	%5 = load i32, i32* %2
	%6 = icmp ne i32 %5, 0
	br i1 %6, label %12, label %13
7:
	br label %8
8:
	%9 = icmp ne i32 1, 0
	br i1 %9, label %1, label %10
10:
	%11 = icmp ne i32 1, 0
	br i1 %11, label %23, label %24
12:
	br label %7
	br label %13
13:
	%14 = load i32, i32* %2
	%15 = icmp ne i32 %14, 0
	br i1 %15, label %16, label %17
16:
	br label %18
17:
	br label %18
18:
	%19 = call i32 @getint()
	store i32 %19, i32* %2
	call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.0, i64 0, i64 0))
	%20 = load i32, i32* %2
	call void @putint(i32 %20)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	%21 = load i32, i32* %2
	%22 = load i32, i32* %2
	call void @putint(i32 %21)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %22)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	br label %10
	br label %7
23:
	br label %24
24:
	ret void
}

define dso_local i32 @func2() {
0:
	%1 = alloca i32
	store i32 43, i32* %1
	%2 = alloca i32
	%3 = load i32, i32* %1
	store i32 %3, i32* %2
	%4 = alloca i32
	%5 = alloca i32
	%6 = alloca i32
	store i32 0, i32* %6
	ret i32 100
}

define dso_local void @func3(i32 %0) {
1:
	%2 = alloca i32
	store i32 %0, i32* %2
	%3 = load i32, i32* %2
	call void @putstr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.s.3, i64 0, i64 0))
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	%4 = alloca i32
	store i32 7, i32* %4
	%5 = alloca i32
	store i32 8, i32* %5
	%6 = load i32, i32* %4
	%7 = load i32, i32* %5
	%8 = add i32 %6, %7
	%9 = icmp eq i32 0, %8
	%10 = zext i1 %9 to i32
	%11 = icmp ne i32 %10, 0
	br i1 %11, label %12, label %13
12:
	br label %13
13:
	%14 = load i32, i32* %4
	%15 = load i32, i32* %5
	%16 = add i32 %14, %15
	%17 = load i32, i32* %4
	%18 = load i32, i32* %5
	%19 = add i32 %17, %18
	%20 = icmp slt i32 %16, %19
	br i1 %20, label %21, label %22
21:
	br label %22
22:
	%23 = load i32, i32* %4
	%24 = load i32, i32* %5
	%25 = add i32 %23, %24
	%26 = load i32, i32* %4
	%27 = load i32, i32* %5
	%28 = add i32 %26, %27
	%29 = icmp sgt i32 %25, %28
	br i1 %29, label %30, label %31
30:
	br label %31
31:
	%32 = load i32, i32* %4
	%33 = load i32, i32* %5
	%34 = add i32 %32, %33
	%35 = load i32, i32* %4
	%36 = load i32, i32* %5
	%37 = add i32 %35, %36
	%38 = icmp sle i32 %34, %37
	br i1 %38, label %39, label %40
39:
	br label %40
40:
	%41 = load i32, i32* %4
	%42 = load i32, i32* %5
	%43 = add i32 %41, %42
	%44 = load i32, i32* %4
	%45 = load i32, i32* %5
	%46 = add i32 %44, %45
	%47 = icmp sge i32 %43, %46
	br i1 %47, label %48, label %49
48:
	br label %49
49:
	%50 = load i32, i32* %4
	%51 = load i32, i32* %5
	%52 = add i32 %50, %51
	%53 = load i32, i32* %4
	%54 = load i32, i32* %5
	%55 = add i32 %53, %54
	%56 = icmp eq i32 %52, %55
	br i1 %56, label %57, label %58
57:
	br label %58
58:
	%59 = load i32, i32* %4
	%60 = load i32, i32* %5
	%61 = add i32 %59, %60
	%62 = load i32, i32* %4
	%63 = load i32, i32* %5
	%64 = add i32 %62, %63
	%65 = icmp ne i32 %61, %64
	br i1 %65, label %66, label %67
66:
	br label %67
67:
	ret void
}

define dso_local i32 @func4(i32 %0, i32 %1, i32 %2) {
3:
	%4 = alloca i32
	store i32 %0, i32* %4
	%5 = alloca i32
	store i32 %1, i32* %5
	%6 = alloca i32
	store i32 %2, i32* %6
	%7 = alloca i32
	%8 = load i32, i32* %4
	%9 = load i32, i32* %5
	%10 = mul i32 %8, %9
	%11 = load i32, i32* %5
	%12 = sdiv i32 %10, %11
	%13 = load i32, i32* %4
	%14 = srem i32 %12, %13
	%15 = load i32, i32* %6
	%16 = add i32 %14, %15
	%17 = load i32, i32* %6
	%18 = load i32, i32* %4
	%19 = load i32, i32* %6
	%20 = sdiv i32 %18, %19
	%21 = load i32, i32* %6
	%22 = sdiv i32 %20, %21
	%23 = mul i32 %17, %22
	%24 = sub i32 %16, %23
	store i32 %24, i32* %7
	%25 = alloca i32
	store i32 0, i32* %25
	%26 = alloca i32
	%27 = load i32, i32* @AZ
	%28 = load i32, i32* @AZA1
	%29 = mul i32 %27, %28
	%30 = load i32, i32* @AZA2
	%31 = srem i32 %29, %30
	store i32 %31, i32* %26
	%32 = alloca i32
	%33 = load i32, i32* %26
	%34 = add i32 %33, 4
	store i32 %34, i32* %32
	%35 = alloca i32
	%36 = load i32, i32* %32
	store i32 %36, i32* %35
	%37 = alloca i32
	%38 = call i32 @func2()
	store i32 %38, i32* %37
	%39 = alloca i32
	%40 = call i32 @func2()
	%41 = sub i32 0, %40
	%42 = sub i32 0, %41
	store i32 %42, i32* %39
	%43 = alloca i32
	%44 = load i32, i32* %37
	%45 = load i32, i32* %35
	%46 = mul i32 %44, %45
	store i32 %46, i32* %43
	%47 = alloca i32
	%48 = load i32, i32* %43
	%49 = load i32, i32* %35
	%50 = sdiv i32 %48, %49
	store i32 %50, i32* %47
	%51 = alloca i32
	%52 = load i32, i32* %47
	%53 = load i32, i32* %37
	%54 = srem i32 %52, %53
	store i32 %54, i32* %51
	%55 = alloca i32
	%56 = load i32, i32* %47
	%57 = load i32, i32* %51
	%58 = add i32 %56, %57
	store i32 %58, i32* %55
	%59 = alloca i32
	%60 = load i32, i32* %47
	%61 = load i32, i32* %51
	%62 = sub i32 %60, %61
	store i32 %62, i32* %59
	%63 = load i32, i32* %32
	%64 = load i32, i32* %35
	%65 = load i32, i32* %37
	%66 = load i32, i32* %39
	%67 = load i32, i32* %43
	%68 = load i32, i32* %47
	%69 = load i32, i32* %51
	%70 = load i32, i32* %55
	%71 = load i32, i32* %59
	call void @putint(i32 %63)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %64)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %65)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %66)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %67)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %68)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %69)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %70)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %71)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	ret i32 1
}

define dso_local i32 @main() {
0:
	call void @func1()
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.4, i64 0, i64 0))
	%1 = call i32 @func2()
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.5, i64 0, i64 0))
	%2 = load i32, i32* @az
	call void @func3(i32 %2)
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.6, i64 0, i64 0))
	%3 = call i32 @func4(i32 1, i32 2, i32 3)
	call void @putstr(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.s.7, i64 0, i64 0))
	ret i32 0
}
