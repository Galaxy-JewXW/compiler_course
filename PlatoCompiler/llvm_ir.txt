declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [24 x i8] c" is not a prime number\0A\00", align 1
@.s.1 = private unnamed_addr constant [20 x i8] c" is a prime number\0A\00", align 1
@.s.2 = private unnamed_addr constant [33 x i8] c" is neither prime nor composite\0A\00", align 1
@.s.3 = private unnamed_addr constant [27 x i8] c"c and d are both positive\0A\00", align 1
@.s.4 = private unnamed_addr constant [30 x i8] c"Neither c nor d are positive\0A\00", align 1
@.s.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

@MAX = dso_local constant i32 6

define dso_local i32 @main() {
b0:
	%v1 = alloca i32
	store i32 0, i32* %v1
	%v2 = alloca i32
	store i32 0, i32* %v2
	%v3 = alloca i32
	store i32 2, i32* %v3
	%v4 = alloca i32
	%v5 = alloca i32
	%v6 = alloca i32
	store i32 1, i32* %v6
	%v7 = alloca i32
	%v8 = alloca i32
	%v9 = call i32 @getint()
	store i32 %v9, i32* %v2
	%v10 = call i32 @getint()
	store i32 %v10, i32* %v4
	%v11 = call i32 @getint()
	store i32 %v11, i32* %v5
	%v12 = call i32 @getint()
	store i32 %v12, i32* %v7
	%v13 = call i32 @getint()
	store i32 %v13, i32* %v8
	%v14 = load i32, i32* %v2
	%v15 = icmp sge i32 %v14, 2
	br i1 %v15, label %b16, label %b17
b16:
	br label %b22
b17:
	%v18 = load i32, i32* %v2
	call void @putint(i32 %v18)
	call void @putstr(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.s.2, i64 0, i64 0))
	br label %b19
b19:
	%v20 = load i32, i32* %v4
	%v21 = icmp sgt i32 %v20, 0
	br i1 %v21, label %b49, label %b47
b22:
	%v23 = load i32, i32* %v3
	%v24 = load i32, i32* %v2
	%v25 = icmp slt i32 %v23, %v24
	br i1 %v25, label %b26, label %b32
b26:
	%v27 = load i32, i32* %v2
	%v28 = load i32, i32* %v3
	%v29 = srem i32 %v27, %v28
	%v30 = icmp eq i32 %v29, 0
	br i1 %v30, label %b35, label %b38
b31:
	br label %b22
b32:
	%v33 = load i32, i32* %v1
	%v34 = icmp ne i32 %v33, 0
	br i1 %v34, label %b41, label %b43
b35:
	%v36 = load i32, i32* %v1
	%v37 = add i32 %v36, 1
	store i32 %v37, i32* %v1
	br label %b38
b38:
	%v39 = load i32, i32* %v3
	%v40 = add i32 %v39, 1
	store i32 %v40, i32* %v3
	br label %b31
b41:
	%v42 = load i32, i32* %v2
	call void @putint(i32 %v42)
	call void @putstr(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.s.0, i64 0, i64 0))
	br label %b45
b43:
	%v44 = load i32, i32* %v2
	call void @putint(i32 %v44)
	call void @putstr(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.s.1, i64 0, i64 0))
	br label %b45
b45:
	br label %b19
b46:
	call void @putstr(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.s.3, i64 0, i64 0))
	br label %b48
b47:
	call void @putstr(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.s.4, i64 0, i64 0))
	br label %b48
b48:
	br label %b52
b49:
	%v50 = load i32, i32* %v5
	%v51 = icmp sgt i32 %v50, 0
	br i1 %v51, label %b46, label %b47
b52:
	%v53 = icmp ne i32 1, 0
	br i1 %v53, label %b54, label %b63
b54:
	%v55 = load i32, i32* %v7
	%v56 = add i32 %v55, 1
	store i32 %v56, i32* %v7
	%v57 = load i32, i32* %v7
	call void @putint(i32 %v57)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.5, i64 0, i64 0))
	%v58 = load i32, i32* %v6
	%v59 = add i32 %v58, 1
	store i32 %v59, i32* %v6
	%v60 = load i32, i32* %v6
	%v61 = icmp sgt i32 %v60, 3
	br i1 %v61, label %b64, label %b65
b62:
	br label %b52
b63:
	br label %b66
b64:
	br label %b63
	br label %b65
b65:
	br label %b62
b66:
	%v67 = load i32, i32* %v8
	%v68 = load i32, i32* @MAX
	%v69 = icmp slt i32 %v67, %v68
	br i1 %v69, label %b70, label %b76
b70:
	%v71 = load i32, i32* %v8
	%v72 = add i32 %v71, 1
	store i32 %v72, i32* %v8
	%v73 = load i32, i32* %v8
	%v74 = icmp eq i32 %v73, 3
	br i1 %v74, label %b77, label %b80
b75:
	br label %b66
b76:
	ret i32 0
b77:
	br label %b75
	br label %b78
b78:
	%v79 = load i32, i32* %v8
	call void @putint(i32 %v79)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.5, i64 0, i64 0))
	br label %b75
b80:
	%v81 = load i32, i32* %v8
	%v82 = icmp eq i32 %v81, 4
	br i1 %v82, label %b77, label %b78
}
