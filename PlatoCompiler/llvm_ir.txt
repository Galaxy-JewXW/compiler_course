declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = constant [19 x i8] c"Final value of x: \00"
@.s.1 = constant [2 x i8] c"\0A\00"



define dso_local i32 @main() {
0:
	%1 = alloca i32
	store i32* %1, i32 0
	%2 = alloca i32
	store i32* %2, i32 5
	%3 = load i32, i32* %2
	%4 = icmp sgt i32 %3, 3
	br i1 %4, label %5, label %6
5:
	store i32* %1, i32 10
	br label %7
6:
	store i32* %1, i32 20
	br label %7
7:
	%8 = alloca i32
	store i32* %8, i32 0
	br label %9
9:
	%10 = load i32, i32* %8
	%11 = icmp slt i32 %10, 5
	br i1 %11, label %12, label %16
12:
	%13 = load i32, i32* %8
	%14 = srem i32 %13, 2
	%15 = icmp eq i32 %14, 0
	br i1 %15, label %18, label %22
16:
	%17 = load i32, i32* %1
	call void @putstr(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %17)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.1, i64 0, i64 0))
	ret i32 0
18:
	%19 = load i32, i32* %1
	%20 = load i32, i32* %8
	%21 = add i32 %19, %20
	store i32* %1, i32 %21
	br label %25
22:
	%23 = load i32, i32* %1
	%24 = mul i32 %23, 2
	store i32* %1, i32 %24
	br label %25
25:
	%26 = load i32, i32* %8
	%27 = add i32 %26, 1
	store i32* %8, i32 %27
	br label %9
}
