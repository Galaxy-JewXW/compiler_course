declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

@a = dso_local global i32 1000

define dso_local i32 @frac(i32 %0) {
1:
	%2 = alloca i32
	store i32* %2, i32 %0
	%3 = load i32, i32* %2
	%4 = icmp eq i32 %3, 1
	br i1 %4, label %5, label %6
5:
	ret i32 1
	br label %12
6:
	%7 = load i32, i32* %2
	%8 = load i32, i32* %2
	%9 = sub i32 %8, 1
	%10 = call i32 @frac(i32 %9)
	%11 = mul i32 %7, %10
	ret i32 %11
	br label %12
12:
	ret i32 0
}

define dso_local i8 @fu(i32 %0, i32 %1) {
2:
	%3 = alloca i32
	store i32* %3, i32 %0
	%4 = alloca i32
	store i32* %4, i32 %1
	%5 = alloca i32
	%6 = call i32 @getint()
	store i32* %5, i32 %6
	%7 = load i32, i32* %3
	%8 = load i32, i32* %4
	%9 = icmp sgt i32 %7, %8
	br i1 %9, label %10, label %13
10:
	%11 = load i32, i32* %5
	%12 = sub i32 0, %11
	store i32* %5, i32 %12
	br label %16
13:
	%14 = load i32, i32* %5
	%15 = srem i32 %14, 3
	store i32* %5, i32 %15
	br label %16
16:
	%17 = load i32, i32* %5
	ret i32 %17
}

define dso_local i32 @main() {
0:
	%1 = call i32 @frac(i32 10)
	%2 = call i8 @fu(i32 9, i32 97)
	%3 = zext i8 %2 to i32
	call void @putint(i32 %1)
	call void @putint(i32 %3)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.0, i64 0, i64 0))
	ret i32 0
}
