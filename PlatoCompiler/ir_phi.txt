declare i32 @getint()
declare i32 @getchar()
declare void @putint(i32)
declare void @putch(i8)
declare void @putstr(i8*)

@.s.0 = private unnamed_addr constant [7 x i8] c"round \00", align 1
@.s.1 = private unnamed_addr constant [3 x i8] c": \00", align 1
@.s.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1



define dso_local i32 @main() {
0:
	%1 = call i32 @getint()
	%2 = mul i32 1, 1
	br label %3
3:
	%4 = phi i32 [ %2, %0 ], [ %19, %18 ], [ %4, %14 ]
	%5 = phi i32 [ 1, %0 ], [ %10, %18 ], [ %10, %14 ]
	%6 = phi i32 [ 1, %0 ], [ %5, %18 ], [ %5, %14 ]
	%7 = add i32 %1, 1
	%8 = icmp slt i32 %4, %7
	br i1 %8, label %9, label %13
9:
	%10 = add i32 %6, %5
	%11 = srem i32 %4, 2
	%12 = icmp eq i32 %11, 1
	br i1 %12, label %14, label %15
13:
	ret i32 0
14:
	br label %3
15:
	call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.0, i64 0, i64 0))
	call void @putint(i32 %4)
	call void @putstr(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.s.1, i64 0, i64 0))
	call void @putint(i32 %5)
	call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.2, i64 0, i64 0))
	%16 = icmp sgt i32 %4, 19
	br i1 %16, label %17, label %18
17:
	br label %13
18:
	%19 = add i32 %4, 1
	br label %3
}
