.data:
s0: .asciiz "funv\n"
s1: .asciiz "funi\n"
s2: .asciiz "try\n"

.text:
func_main:
main_b0:
    # br label %1

main_b1:
    # br label %2

main_b2:
    # br label %3

main_b3:
    # %4 = icmp eq i32 1, 2
    # br i1 %4, label %1, label %5
    li $k0, 1
    beq $k0, 2, main_b1

main_b5:
    # br label %6

main_b6:
    # br label %7

main_b7:
    # call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.2, i64 0, i64 0))
    la $a0, s2
    li $v0, 4
    syscall
    # call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.2, i64 0, i64 0))
    syscall
    # call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.2, i64 0, i64 0))
    syscall
    # call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.2, i64 0, i64 0))
    syscall
    # call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.2, i64 0, i64 0))
    syscall
    # call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.2, i64 0, i64 0))
    syscall
    # call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.2, i64 0, i64 0))
    syscall
    # ret i32 0
    li $v0, 10
    syscall

