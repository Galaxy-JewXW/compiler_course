.data
s0: .asciiz "j : "
s1: .asciiz ", k : "
s2: .asciiz ", l : "
s3: .asciiz "\n"
s4: .asciiz "a! = "
s5: .asciiz ", num = "
s6: .asciiz "scanf a, b to get gcd and lcm\n"
s7: .asciiz "gcd is "
s8: .asciiz "lcm is "
s9: .asciiz "scanf a to get Fibonacci\n"
s10: .asciiz "fib is "


.text
main:
main_b0:
# move 0 -> %2
li $t0, 0
# move 4 -> %3
li $t1, 4
# move 11 -> %4
li $t2, 11
# br label %1
j main_b1
main_b1:
# %5 = icmp sle i32 %2, 7
# br i1 %5, label %6, label %12
ble $t0, 7, main_b6
j main_b12
main_b6:
# %7 = add i32 %2, 1
addiu $t0, $t0, 1
# %8 = icmp eq i32 %4, %7
# br i1 %8, label %13, label %15
beq $t2, $t0, main_b13
j main_b15
main_b9:
# move %7 -> %2
move $t0, $t0
# move %10 -> %3
move $t1, $t3
# move %11 -> %4
move $t2, $t4
# br label %1
j main_b1
main_b12:
# call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.0, i64 0, i64 0))
la $a0, s0
li $v0, 4
syscall
# call void @putint(i32 %4)
move $a0, $t2
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.1, i64 0, i64 0))
la $a0, s1
li $v0, 4
syscall
# call void @putint(i32 %3)
move $a0, $t1
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.2, i64 0, i64 0))
la $a0, s2
li $v0, 4
syscall
# call void @putint(i32 4)
li $a0, 4
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# br label %17
j main_b17
main_b13:
# %14 = add i32 %3, %4
addu $t3, $t1, $t2
# move %14 -> %10
move $t3, $t3
# move %4 -> %11
move $t4, $t2
# br label %9
j main_b9
main_b15:
# %16 = sub i32 %4, 1
addiu $t3, $t2, -1
# move %10 -> %t89
move $k0, $t3
lw $k0, -4($sp)
# move %3 -> %10
move $t3, $t1
# move %t89 -> %11
lw $t4, -4($sp)
# br label %9
j main_b9
main_b17:
# move 1 -> %19
li $t0, 1
# move 1 -> %20
li $t1, 1
# move 6 -> %21
li $t2, 6
# br label %18
j main_b18
main_b18:
# %22 = icmp sge i32 %21, 1
# br i1 %22, label %23, label %96
bge $t2, 1, main_b23
j main_b96
main_b23:
# %24 = mul i32 %20, %21
mul $t3, $t1, $t2
# %25 = sub i32 %21, 1
addiu $t2, $t2, -1
# %26 = icmp eq i32 %25, 1
# br i1 %26, label %29, label %30
beq $t2, 1, main_b29
j main_b30
main_b96:
# move %20 -> %28
move $t2, $t1
# br label %27
j main_b27
main_b27:
# call void @putstr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.s.4, i64 0, i64 0))
la $a0, s4
syscall
# call void @putint(i32 %28)
move $a0, $t2
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.s.5, i64 0, i64 0))
la $a0, s5
li $v0, 4
syscall
# call void @putint(i32 %19)
move $a0, $t0
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# br label %36
j main_b36
main_b29:
# move %24 -> %28
move $t2, $t3
# br label %27
j main_b27
main_b30:
# %31 = icmp ne i32 %25, 1
# br i1 %31, label %32, label %99
bne $t2, 1, main_b32
j main_b99
main_b32:
# %33 = add i32 %19, 1
addiu $t1, $t0, 1
# move %33 -> %35
move $t1, $t1
# br label %34
j main_b34
main_b99:
# move %19 -> %35
move $t1, $t0
# br label %34
j main_b34
main_b34:
# br label %18
j main_b18
main_b36:
# br label %37
j main_b37
main_b37:
# br label %38
j main_b38
main_b38:
# %39 = icmp sgt i32 2, 6
# br i1 %39, label %40, label %41
li $k0, 2
bgt $k0, 6, main_b40
j main_b41
main_b40:
# move 2 -> %46
li $t0, 2
# br label %45
j main_b45
main_b41:
# %42 = icmp slt i32 2, 6
# br i1 %42, label %43, label %44
li $k0, 2
blt $k0, 6, main_b43
j main_b44
main_b43:
# move 6 -> %46
li $t0, 6
# br label %45
j main_b45
main_b44:
# move 2 -> %46
li $t0, 2
# br label %45
j main_b45
main_b45:
# call void @putint(i32 %46)
move $a0, $t0
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# call void @putstr(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.s.6, i64 0, i64 0))
la $a0, s6
syscall
# %47 = call i32 @getint()
li $v0, 5
syscall
move $t0, $v0
# %48 = call i32 @getint()
syscall
move $t1, $v0
# %49 = call i32 @gcd(i32 %47, i32 %48)
sw $t0, -8($sp)
sw $t2, -12($sp)
sw $t1, -16($sp)
sw $ra, -20($sp)
move $a1, $t0
move $a2, $t1
addiu $sp, $sp, -20
jal gcd
lw $ra, 0($sp)
addiu $sp, $sp, 20
lw $t0, -8($sp)
lw $t2, -12($sp)
lw $t1, -16($sp)
move $t2, $v0
# call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.7, i64 0, i64 0))
la $a0, s7
li $v0, 4
syscall
# call void @putint(i32 %49)
move $a0, $t2
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# %50 = call i32 @lcm(i32 %47, i32 %48)
sw $t0, -8($sp)
sw $t1, -12($sp)
sw $ra, -16($sp)
move $a1, $t0
move $a2, $t1
addiu $sp, $sp, -16
jal lcm
lw $ra, 0($sp)
addiu $sp, $sp, 16
lw $t0, -8($sp)
lw $t1, -12($sp)
move $t0, $v0
# call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.8, i64 0, i64 0))
la $a0, s8
li $v0, 4
syscall
# call void @putint(i32 %50)
move $a0, $t0
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# %51 = call i32 @getint()
li $v0, 5
syscall
move $t0, $v0
# %52 = add i32 %51, 3
addiu $t1, $t0, 3
# %53 = sub i32 %52, 10
addiu $t1, $t1, -10
# %54 = mul i32 %53, %51
mul $t0, $t1, $t0
# call void @putint(i32 %54)
move $a0, $t0
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# br label %55
j main_b55
main_b55:
# call void @putstr(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.s.9, i64 0, i64 0))
la $a0, s9
syscall
# %56 = call i32 @getint()
li $v0, 5
syscall
move $t0, $v0
# %57 = call i32 @fun5(i32 %56)
sw $t0, -8($sp)
sw $ra, -12($sp)
move $a1, $t0
addiu $sp, $sp, -12
jal fun5
lw $ra, 0($sp)
addiu $sp, $sp, 12
lw $t0, -8($sp)
move $t0, $v0
# call void @putstr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.s.10, i64 0, i64 0))
la $a0, s10
li $v0, 4
syscall
# call void @putint(i32 %57)
move $a0, $t0
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# ret i32 0
li $v0, 10
syscall
fun1:
fun1_b0:
# move 0 -> %2
li $t0, 0
# move 4 -> %3
li $t1, 4
# move 11 -> %4
li $t2, 11
# br label %1
j fun1_b1
fun1_b1:
# %5 = icmp sle i32 %2, 7
# br i1 %5, label %6, label %12
ble $t0, 7, fun1_b6
j fun1_b12
fun1_b6:
# %7 = add i32 %2, 1
addiu $t0, $t0, 1
# %8 = icmp eq i32 %4, %7
# br i1 %8, label %13, label %15
beq $t2, $t0, fun1_b13
j fun1_b15
fun1_b9:
# move %7 -> %2
move $t0, $t0
# move %10 -> %3
move $t1, $t3
# move %11 -> %4
move $t2, $t4
# br label %1
j fun1_b1
fun1_b12:
# call void @putstr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.s.0, i64 0, i64 0))
la $a0, s0
li $v0, 4
syscall
# call void @putint(i32 %4)
move $a0, $t2
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.1, i64 0, i64 0))
la $a0, s1
li $v0, 4
syscall
# call void @putint(i32 %3)
move $a0, $t1
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.s.2, i64 0, i64 0))
la $a0, s2
li $v0, 4
syscall
# call void @putint(i32 4)
li $a0, 4
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# ret void
jr $ra
fun1_b13:
# %14 = add i32 %3, %4
addu $t3, $t1, $t2
# move %14 -> %10
move $t3, $t3
# move %4 -> %11
move $t4, $t2
# br label %9
j fun1_b9
fun1_b15:
# %16 = sub i32 %4, 1
addiu $t3, $t2, -1
# move %10 -> %t68
move $k0, $t3
lw $k0, -4($sp)
# move %3 -> %10
move $t3, $t1
# move %t68 -> %11
lw $t4, -4($sp)
# br label %9
j fun1_b9
fun2:
fun2_b1:
# move 1 -> %3
li $t0, 1
# move 1 -> %4
li $t1, 1
# move %0 -> %5
move $t2, $a1
# br label %2
j fun2_b2
fun2_b2:
# %6 = icmp sge i32 %5, 1
# br i1 %6, label %7, label %75
bge $t2, 1, fun2_b7
j fun2_b75
fun2_b7:
# %8 = mul i32 %4, %5
mul $t3, $t1, $t2
# %9 = sub i32 %5, 1
addiu $t2, $t2, -1
# %10 = icmp eq i32 %9, 1
# br i1 %10, label %13, label %14
beq $t2, 1, fun2_b13
j fun2_b14
fun2_b75:
# move %4 -> %12
move $t2, $t1
# br label %11
j fun2_b11
fun2_b11:
# call void @putstr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.s.4, i64 0, i64 0))
la $a0, s4
syscall
# call void @putint(i32 %12)
move $a0, $t2
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.s.5, i64 0, i64 0))
la $a0, s5
li $v0, 4
syscall
# call void @putint(i32 %3)
move $a0, $t0
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# ret i32 1
li $v0, 1
jr $ra
fun2_b13:
# move %8 -> %12
move $t2, $t3
# br label %11
j fun2_b11
fun2_b14:
# %15 = icmp ne i32 %9, 1
# br i1 %15, label %16, label %78
bne $t2, 1, fun2_b16
j fun2_b78
fun2_b16:
# %17 = add i32 %3, 1
addiu $t1, $t0, 1
# move %17 -> %19
move $t1, $t1
# br label %18
j fun2_b18
fun2_b78:
# move %3 -> %19
move $t1, $t0
# br label %18
j fun2_b18
fun2_b18:
# br label %2
j fun2_b2
fun3:
fun3_b2:
# %3 = icmp sgt i32 %0, %1
# br i1 %3, label %4, label %5
bgt $a1, $a2, fun3_b4
j fun3_b5
fun3_b4:
# ret i32 %0
move $v0, $a1
jr $ra
fun3_b5:
# %6 = icmp slt i32 %0, %1
# br i1 %6, label %7, label %8
blt $a1, $a2, fun3_b7
j fun3_b8
fun3_b7:
# ret i32 %1
move $v0, $a2
jr $ra
fun3_b8:
# ret i32 %0
move $v0, $a1
jr $ra
gcd:
gcd_b2:
# %3 = srem i32 %0, %1
div $a1, $a2
mfhi $t0
# %4 = icmp eq i32 %3, 0
# br i1 %4, label %5, label %6
beq $t0, 0, gcd_b5
j gcd_b6
gcd_b5:
# ret i32 %1
move $v0, $a2
jr $ra
gcd_b6:
# %7 = srem i32 %0, %1
div $a1, $a2
mfhi $t0
# %8 = call i32 @gcd(i32 %1, i32 %7)
sw $t0, -12($sp)
sw $a2, -16($sp)
sw $a1, -20($sp)
sw $ra, -24($sp)
lw $a1, -16($sp)
move $a2, $t0
addiu $sp, $sp, -24
jal gcd
lw $ra, 0($sp)
addiu $sp, $sp, 24
lw $t0, -12($sp)
lw $a2, -16($sp)
lw $a1, -20($sp)
move $t0, $v0
# ret i32 %8
move $v0, $t0
jr $ra
lcm:
lcm_b2:
# %3 = call i32 @gcd(i32 %0, i32 %1)
sw $t0, -12($sp)
sw $t1, -16($sp)
sw $a1, -20($sp)
sw $a2, -24($sp)
sw $ra, -28($sp)
lw $a1, -20($sp)
lw $a2, -24($sp)
addiu $sp, $sp, -28
jal gcd
lw $ra, 0($sp)
addiu $sp, $sp, 28
lw $t0, -12($sp)
lw $t1, -16($sp)
lw $a1, -20($sp)
lw $a2, -24($sp)
move $t0, $v0
# %4 = mul i32 %0, %1
mul $t1, $a1, $a2
# %5 = sdiv i32 %4, %3
div $t1, $t0
mflo $t0
# ret i32 %5
move $v0, $t0
jr $ra
fun4:
fun4_b3:
# %4 = add i32 %0, %1
addu $t0, $a1, $a2
# %5 = sub i32 %4, %2
subu $t0, $t0, $a3
# %6 = mul i32 %5, %0
mul $t0, $t0, $a1
# call void @putint(i32 %6)
move $a0, $t0
li $v0, 1
syscall
# call void @putstr(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.s.3, i64 0, i64 0))
la $a0, s3
li $v0, 4
syscall
# ret void
jr $ra
fun5:
fun5_b1:
# %2 = icmp eq i32 %0, 1
# br i1 %2, label %3, label %4
beq $a1, 1, fun5_b3
j fun5_b4
fun5_b3:
# ret i32 1
li $v0, 1
jr $ra
fun5_b4:
# %5 = icmp eq i32 %0, 2
# br i1 %5, label %6, label %7
beq $a1, 2, fun5_b6
j fun5_b7
fun5_b6:
# ret i32 1
li $v0, 1
jr $ra
fun5_b7:
# %8 = sub i32 %0, 1
addiu $t0, $a1, -1
# %9 = call i32 @fun5(i32 %8)
sw $t0, -8($sp)
sw $t1, -12($sp)
sw $a1, -16($sp)
sw $ra, -20($sp)
move $a1, $t0
addiu $sp, $sp, -20
jal fun5
lw $ra, 0($sp)
addiu $sp, $sp, 20
lw $t0, -8($sp)
lw $t1, -12($sp)
lw $a1, -16($sp)
move $t0, $v0
# %10 = sub i32 %0, 2
addiu $t1, $a1, -2
# %11 = call i32 @fun5(i32 %10)
sw $t0, -8($sp)
sw $t1, -12($sp)
sw $a1, -16($sp)
sw $ra, -20($sp)
move $a1, $t1
addiu $sp, $sp, -20
jal fun5
lw $ra, 0($sp)
addiu $sp, $sp, 20
lw $t0, -8($sp)
lw $t1, -12($sp)
lw $a1, -16($sp)
move $t1, $v0
# %12 = add i32 %9, %11
addu $t0, $t0, $t1
# ret i32 %12
move $v0, $t0
jr $ra
