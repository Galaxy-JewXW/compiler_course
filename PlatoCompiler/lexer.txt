INTTK int
IDENFR program_length
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR program
LBRACK [
INTCON 65536
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
INTTK int
IDENFR tape
LBRACK [
INTCON 65536
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
INTTK int
IDENFR input
LBRACK [
INTCON 65536
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
INTTK int
IDENFR input_length
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR output
LBRACK [
INTCON 65536
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
INTTK int
IDENFR output_length
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR get_bf_char
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR get
SEMICN ;
IDENFR get
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR get
NEQ !=
INTCON 62
AND &&
IDENFR get
NEQ !=
INTCON 60
AND &&
IDENFR get
NEQ !=
INTCON 43
AND &&
IDENFR get
NEQ !=
INTCON 45
AND &&
IDENFR get
NEQ !=
INTCON 91
AND &&
IDENFR get
NEQ !=
INTCON 93
AND &&
IDENFR get
NEQ !=
INTCON 46
AND &&
IDENFR get
NEQ !=
INTCON 44
AND &&
IDENFR get
NEQ !=
INTCON 35
SEMICN ;
RPARENT )
LBRACE {
IDENFR get
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
RBRACE }
RETURNTK return
IDENFR get
SEMICN ;
RBRACE }
VOIDTK void
IDENFR read_program
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR get
SEMICN ;
IDENFR get
ASSIGN =
IDENFR get_bf_char
LPARENT (
RPARENT )
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR get
NEQ !=
INTCON 35
SEMICN ;
RPARENT )
LBRACE {
IDENFR program
LBRACK [
IDENFR program_length
RBRACK ]
ASSIGN =
IDENFR get
SEMICN ;
IDENFR get
ASSIGN =
IDENFR get_bf_char
LPARENT (
RPARENT )
SEMICN ;
IDENFR program_length
ASSIGN =
IDENFR program_length
PLUS +
INTCON 1
SEMICN ;
RBRACE }
INTTK int
IDENFR verify
SEMICN ;
IDENFR verify
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR verify
NEQ !=
INTCON 105
RPARENT )
LBRACE {
RETURNTK return
SEMICN ;
RBRACE }
IDENFR input_length
ASSIGN =
GETINTTK getint
LPARENT (
RPARENT )
SEMICN ;
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR input_length
SEMICN ;
RPARENT )
LBRACE {
IDENFR input
LBRACK [
IDENFR i
RBRACK ]
ASSIGN =
GETCHARTK getchar
LPARENT (
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR run_program
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR ip
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR read_head
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR input_head
ASSIGN =
INTCON 0
SEMICN ;
INTTK int
IDENFR return_address
LBRACK [
INTCON 512
RBRACK ]
ASSIGN =
LBRACE {
RBRACE }
SEMICN ;
INTTK int
IDENFR return_address_top
ASSIGN =
INTCON 0
SEMICN ;
IDENFR output_length
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR ip
LSS <
IDENFR program_length
SEMICN ;
RPARENT )
LBRACE {
INTTK int
IDENFR code
ASSIGN =
IDENFR program
LBRACK [
IDENFR ip
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR code
EQL ==
INTCON 62
RPARENT )
LBRACE {
IDENFR read_head
ASSIGN =
IDENFR read_head
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR code
EQL ==
INTCON 60
RPARENT )
LBRACE {
IDENFR read_head
ASSIGN =
IDENFR read_head
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR code
EQL ==
INTCON 43
RPARENT )
LBRACE {
IDENFR tape
LBRACK [
IDENFR read_head
RBRACK ]
ASSIGN =
IDENFR tape
LBRACK [
IDENFR read_head
RBRACK ]
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR code
EQL ==
INTCON 45
RPARENT )
LBRACE {
IDENFR tape
LBRACK [
IDENFR read_head
RBRACK ]
ASSIGN =
IDENFR tape
LBRACK [
IDENFR read_head
RBRACK ]
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR code
EQL ==
INTCON 91
RPARENT )
LBRACE {
INTTK int
IDENFR val
ASSIGN =
IDENFR tape
LBRACK [
IDENFR read_head
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR val
NEQ !=
INTCON 0
RPARENT )
LBRACE {
IDENFR return_address
LBRACK [
IDENFR return_address_top
RBRACK ]
ASSIGN =
IDENFR ip
SEMICN ;
IDENFR return_address_top
ASSIGN =
IDENFR return_address_top
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
INTTK int
IDENFR loop
ASSIGN =
INTCON 1
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR loop
GRE >
INTCON 0
SEMICN ;
RPARENT )
LBRACE {
IDENFR ip
ASSIGN =
IDENFR ip
PLUS +
INTCON 1
SEMICN ;
IFTK if
LPARENT (
IDENFR program
LBRACK [
IDENFR ip
RBRACK ]
EQL ==
INTCON 93
RPARENT )
LBRACE {
IDENFR loop
ASSIGN =
IDENFR loop
MINU -
INTCON 1
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR program
LBRACK [
IDENFR ip
RBRACK ]
EQL ==
INTCON 91
RPARENT )
LBRACE {
IDENFR loop
ASSIGN =
IDENFR loop
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR code
EQL ==
INTCON 93
RPARENT )
LBRACE {
INTTK int
IDENFR val
ASSIGN =
IDENFR tape
LBRACK [
IDENFR read_head
RBRACK ]
SEMICN ;
IFTK if
LPARENT (
IDENFR val
EQL ==
INTCON 0
RPARENT )
LBRACE {
IDENFR return_address_top
ASSIGN =
IDENFR return_address_top
MINU -
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR ip
ASSIGN =
IDENFR return_address
LBRACK [
IDENFR return_address_top
MINU -
INTCON 1
RBRACK ]
SEMICN ;
RBRACE }
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR code
EQL ==
INTCON 46
RPARENT )
LBRACE {
IDENFR output
LBRACK [
IDENFR output_length
RBRACK ]
ASSIGN =
IDENFR tape
LBRACK [
IDENFR read_head
RBRACK ]
SEMICN ;
IDENFR output_length
ASSIGN =
IDENFR output_length
PLUS +
INTCON 1
SEMICN ;
RBRACE }
ELSETK else
IFTK if
LPARENT (
IDENFR code
EQL ==
INTCON 44
RPARENT )
LBRACE {
IFTK if
LPARENT (
IDENFR input_head
GEQ >=
IDENFR input_length
RPARENT )
LBRACE {
IDENFR tape
LBRACK [
IDENFR read_head
RBRACK ]
ASSIGN =
INTCON 0
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR tape
LBRACK [
IDENFR read_head
RBRACK ]
ASSIGN =
IDENFR input
LBRACK [
IDENFR input_head
RBRACK ]
SEMICN ;
IDENFR input_head
ASSIGN =
IDENFR input_head
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
IDENFR ip
ASSIGN =
IDENFR ip
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
VOIDTK void
IDENFR output_
LPARENT (
RPARENT )
LBRACE {
INTTK int
IDENFR i
ASSIGN =
INTCON 0
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR i
LSS <
IDENFR output_length
SEMICN ;
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "%c"
COMMA ,
IDENFR output
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
SEMICN ;
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
SEMICN ;
RBRACE }
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
IDENFR read_program
LPARENT (
RPARENT )
SEMICN ;
IDENFR run_program
LPARENT (
RPARENT )
SEMICN ;
IDENFR output_
LPARENT (
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
