VOIDTK void
IDENFR printInt
LPARENT (
INTTK int
IDENFR var
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "print int : %d\n"
COMMA ,
IDENFR var
RPARENT )
SEMICN ;
RETURNTK return
SEMICN ;
RBRACE }
INTTK int
MAINTK main
LPARENT (
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "19373479\n"
RPARENT )
SEMICN ;
INTTK int
IDENFR a
ASSIGN =
INTCON 10
COMMA ,
IDENFR b
COMMA ,
IDENFR c
COMMA ,
IDENFR d
COMMA ,
IDENFR e
SEMICN ;
IDENFR b
ASSIGN =
INTCON 2
SEMICN ;
IDENFR c
ASSIGN =
INTCON 3
SEMICN ;
IDENFR d
ASSIGN =
INTCON 4
SEMICN ;
IDENFR e
ASSIGN =
INTCON 5
SEMICN ;
FORTK for
LPARENT (
SEMICN ;
IDENFR a
SEMICN ;
RPARENT )
LBRACE {
IDENFR a
ASSIGN =
IDENFR a
MINU -
INTCON 1
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "a: %d\n"
COMMA ,
IDENFR a
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR c
GEQ >=
IDENFR a
RPARENT )
LBRACE {
IDENFR c
ASSIGN =
IDENFR c
DIV /
LPARENT (
IDENFR a
PLUS +
INTCON 1
RPARENT )
PLUS +
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "c: %d\n"
COMMA ,
IDENFR c
RPARENT )
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR d
LEQ <=
IDENFR a
RPARENT )
LBRACE {
IDENFR d
ASSIGN =
IDENFR d
MULT *
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "d1: %d\n"
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
RBRACE }
ELSETK else
LBRACE {
IDENFR d
ASSIGN =
IDENFR d
MOD %
LPARENT (
IDENFR a
PLUS +
INTCON 3
RPARENT )
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "d2: %d\n"
COMMA ,
IDENFR d
RPARENT )
SEMICN ;
RBRACE }
FORTK for
LPARENT (
SEMICN ;
IDENFR e
LSS <
IDENFR d
SEMICN ;
RPARENT )
LBRACE {
IDENFR e
ASSIGN =
IDENFR e
PLUS +
IDENFR a
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "e1: %d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
IFTK if
LPARENT (
IDENFR e
EQL ==
IDENFR b
RPARENT )
LBRACE {
PRINTFTK printf
LPARENT (
STRCON "break\n"
RPARENT )
SEMICN ;
BREAKTK break
SEMICN ;
RBRACE }
IFTK if
LPARENT (
IDENFR e
NEQ !=
IDENFR c
RPARENT )
LBRACE {
IDENFR e
ASSIGN =
IDENFR c
PLUS +
IDENFR e
SEMICN ;
PRINTFTK printf
LPARENT (
STRCON "e2: %d\n"
COMMA ,
IDENFR e
RPARENT )
SEMICN ;
CONTINUETK continue
SEMICN ;
RBRACE }
RBRACE }
RBRACE }
IFTK if
LPARENT (
NOT !
IDENFR a
RPARENT )
LBRACE {
IDENFR printInt
LPARENT (
IDENFR a
RPARENT )
SEMICN ;
RBRACE }
IDENFR printInt
LPARENT (
IDENFR b
RPARENT )
SEMICN ;
IDENFR printInt
LPARENT (
IDENFR c
RPARENT )
SEMICN ;
IDENFR printInt
LPARENT (
IDENFR d
RPARENT )
SEMICN ;
IDENFR printInt
LPARENT (
IDENFR e
RPARENT )
SEMICN ;
RETURNTK return
INTCON 0
SEMICN ;
RBRACE }
